// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/27/2022 00:18:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ProcessadorMips
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProcessadorMips_vlg_sample_tst(
	Clock,
	regA,
	regB,
	regC,
	regD,
	regE,
	regF,
	Reset,
	sempre31,
	sampler_tx
);
input  Clock;
input [4:0] regA;
input [4:0] regB;
input [4:0] regC;
input [4:0] regD;
input [4:0] regE;
input [4:0] regF;
input  Reset;
input [4:0] sempre31;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or regA or regB or regC or regD or regE or regF or Reset or sempre31)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ProcessadorMips_vlg_check_tst (
	Ch_select_pc,
	Data_in_reg,
	ent2,
	instrucao,
	n_intrucao,
	Opalu,
	Overflow,
	Reg_1,
	Reg_2,
	Result,
	VisualA,
	VisualB,
	VisualC,
	VisualD,
	VisualE,
	VisualF,
	zero,
	sampler_rx
);
input [2:0] Ch_select_pc;
input [31:0] Data_in_reg;
input [31:0] ent2;
input [31:0] instrucao;
input [11:0] n_intrucao;
input [4:0] Opalu;
input  Overflow;
input [31:0] Reg_1;
input [31:0] Reg_2;
input [31:0] Result;
input [31:0] VisualA;
input [31:0] VisualB;
input [31:0] VisualC;
input [31:0] VisualD;
input [31:0] VisualE;
input [31:0] VisualF;
input  zero;
input sampler_rx;

reg [2:0] Ch_select_pc_expected;
reg [31:0] Data_in_reg_expected;
reg [31:0] ent2_expected;
reg [31:0] instrucao_expected;
reg [11:0] n_intrucao_expected;
reg [4:0] Opalu_expected;
reg  Overflow_expected;
reg [31:0] Reg_1_expected;
reg [31:0] Reg_2_expected;
reg [31:0] Result_expected;
reg [31:0] VisualA_expected;
reg [31:0] VisualB_expected;
reg [31:0] VisualC_expected;
reg [31:0] VisualD_expected;
reg [31:0] VisualE_expected;
reg [31:0] VisualF_expected;
reg  zero_expected;

reg [2:0] Ch_select_pc_prev;
reg [31:0] Data_in_reg_prev;
reg [31:0] ent2_prev;
reg [31:0] instrucao_prev;
reg [11:0] n_intrucao_prev;
reg [4:0] Opalu_prev;
reg  Overflow_prev;
reg [31:0] Reg_1_prev;
reg [31:0] Reg_2_prev;
reg [31:0] Result_prev;
reg [31:0] VisualA_prev;
reg [31:0] VisualB_prev;
reg [31:0] VisualC_prev;
reg [31:0] VisualD_prev;
reg [31:0] VisualE_prev;
reg [31:0] VisualF_prev;
reg  zero_prev;

reg [2:0] Ch_select_pc_expected_prev;
reg [31:0] Data_in_reg_expected_prev;
reg [31:0] ent2_expected_prev;
reg [31:0] instrucao_expected_prev;
reg [11:0] n_intrucao_expected_prev;
reg [4:0] Opalu_expected_prev;
reg  Overflow_expected_prev;
reg [31:0] Reg_1_expected_prev;
reg [31:0] Reg_2_expected_prev;
reg [31:0] Result_expected_prev;
reg [31:0] VisualA_expected_prev;
reg [31:0] VisualB_expected_prev;
reg [31:0] VisualC_expected_prev;
reg [31:0] VisualD_expected_prev;
reg [31:0] VisualE_expected_prev;
reg [31:0] VisualF_expected_prev;
reg  zero_expected_prev;

reg [2:0] last_Ch_select_pc_exp;
reg [31:0] last_Data_in_reg_exp;
reg [31:0] last_ent2_exp;
reg [31:0] last_instrucao_exp;
reg [11:0] last_n_intrucao_exp;
reg [4:0] last_Opalu_exp;
reg  last_Overflow_exp;
reg [31:0] last_Reg_1_exp;
reg [31:0] last_Reg_2_exp;
reg [31:0] last_Result_exp;
reg [31:0] last_VisualA_exp;
reg [31:0] last_VisualB_exp;
reg [31:0] last_VisualC_exp;
reg [31:0] last_VisualD_exp;
reg [31:0] last_VisualE_exp;
reg [31:0] last_VisualF_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ch_select_pc_prev = Ch_select_pc;
	Data_in_reg_prev = Data_in_reg;
	ent2_prev = ent2;
	instrucao_prev = instrucao;
	n_intrucao_prev = n_intrucao;
	Opalu_prev = Opalu;
	Overflow_prev = Overflow;
	Reg_1_prev = Reg_1;
	Reg_2_prev = Reg_2;
	Result_prev = Result;
	VisualA_prev = VisualA;
	VisualB_prev = VisualB;
	VisualC_prev = VisualC;
	VisualD_prev = VisualD;
	VisualE_prev = VisualE;
	VisualF_prev = VisualF;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	Ch_select_pc_expected_prev = Ch_select_pc_expected;
	Data_in_reg_expected_prev = Data_in_reg_expected;
	ent2_expected_prev = ent2_expected;
	instrucao_expected_prev = instrucao_expected;
	n_intrucao_expected_prev = n_intrucao_expected;
	Opalu_expected_prev = Opalu_expected;
	Overflow_expected_prev = Overflow_expected;
	Reg_1_expected_prev = Reg_1_expected;
	Reg_2_expected_prev = Reg_2_expected;
	Result_expected_prev = Result_expected;
	VisualA_expected_prev = VisualA_expected;
	VisualB_expected_prev = VisualB_expected;
	VisualC_expected_prev = VisualC_expected;
	VisualD_expected_prev = VisualD_expected;
	VisualE_expected_prev = VisualE_expected;
	VisualF_expected_prev = VisualF_expected;
	zero_expected_prev = zero_expected;
end


// expected Ch_select_pc[ 2 ]
initial
begin
	Ch_select_pc_expected[2] = 1'bX;
end 
// expected Ch_select_pc[ 1 ]
initial
begin
	Ch_select_pc_expected[1] = 1'bX;
end 
// expected Ch_select_pc[ 0 ]
initial
begin
	Ch_select_pc_expected[0] = 1'bX;
end 
// expected Opalu[ 4 ]
initial
begin
	Opalu_expected[4] = 1'bX;
end 
// expected Opalu[ 3 ]
initial
begin
	Opalu_expected[3] = 1'bX;
end 
// expected Opalu[ 2 ]
initial
begin
	Opalu_expected[2] = 1'bX;
end 
// expected Opalu[ 1 ]
initial
begin
	Opalu_expected[1] = 1'bX;
end 
// expected Opalu[ 0 ]
initial
begin
	Opalu_expected[0] = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'bX;
end 
// expected ent2[ 31 ]
initial
begin
	ent2_expected[31] = 1'bX;
end 
// expected ent2[ 30 ]
initial
begin
	ent2_expected[30] = 1'bX;
end 
// expected ent2[ 29 ]
initial
begin
	ent2_expected[29] = 1'bX;
end 
// expected ent2[ 28 ]
initial
begin
	ent2_expected[28] = 1'bX;
end 
// expected ent2[ 27 ]
initial
begin
	ent2_expected[27] = 1'bX;
end 
// expected ent2[ 26 ]
initial
begin
	ent2_expected[26] = 1'bX;
end 
// expected ent2[ 25 ]
initial
begin
	ent2_expected[25] = 1'bX;
end 
// expected ent2[ 24 ]
initial
begin
	ent2_expected[24] = 1'bX;
end 
// expected ent2[ 23 ]
initial
begin
	ent2_expected[23] = 1'bX;
end 
// expected ent2[ 22 ]
initial
begin
	ent2_expected[22] = 1'bX;
end 
// expected ent2[ 21 ]
initial
begin
	ent2_expected[21] = 1'bX;
end 
// expected ent2[ 20 ]
initial
begin
	ent2_expected[20] = 1'bX;
end 
// expected ent2[ 19 ]
initial
begin
	ent2_expected[19] = 1'bX;
end 
// expected ent2[ 18 ]
initial
begin
	ent2_expected[18] = 1'bX;
end 
// expected ent2[ 17 ]
initial
begin
	ent2_expected[17] = 1'bX;
end 
// expected ent2[ 16 ]
initial
begin
	ent2_expected[16] = 1'bX;
end 
// expected ent2[ 15 ]
initial
begin
	ent2_expected[15] = 1'bX;
end 
// expected ent2[ 14 ]
initial
begin
	ent2_expected[14] = 1'bX;
end 
// expected ent2[ 13 ]
initial
begin
	ent2_expected[13] = 1'bX;
end 
// expected ent2[ 12 ]
initial
begin
	ent2_expected[12] = 1'bX;
end 
// expected ent2[ 11 ]
initial
begin
	ent2_expected[11] = 1'bX;
end 
// expected ent2[ 10 ]
initial
begin
	ent2_expected[10] = 1'bX;
end 
// expected ent2[ 9 ]
initial
begin
	ent2_expected[9] = 1'bX;
end 
// expected ent2[ 8 ]
initial
begin
	ent2_expected[8] = 1'bX;
end 
// expected ent2[ 7 ]
initial
begin
	ent2_expected[7] = 1'bX;
end 
// expected ent2[ 6 ]
initial
begin
	ent2_expected[6] = 1'bX;
end 
// expected ent2[ 5 ]
initial
begin
	ent2_expected[5] = 1'bX;
end 
// expected ent2[ 4 ]
initial
begin
	ent2_expected[4] = 1'bX;
end 
// expected ent2[ 3 ]
initial
begin
	ent2_expected[3] = 1'bX;
end 
// expected ent2[ 2 ]
initial
begin
	ent2_expected[2] = 1'bX;
end 
// expected ent2[ 1 ]
initial
begin
	ent2_expected[1] = 1'bX;
end 
// expected ent2[ 0 ]
initial
begin
	ent2_expected[0] = 1'bX;
end 
// expected Result[ 31 ]
initial
begin
	Result_expected[31] = 1'bX;
end 
// expected Result[ 30 ]
initial
begin
	Result_expected[30] = 1'bX;
end 
// expected Result[ 29 ]
initial
begin
	Result_expected[29] = 1'bX;
end 
// expected Result[ 28 ]
initial
begin
	Result_expected[28] = 1'bX;
end 
// expected Result[ 27 ]
initial
begin
	Result_expected[27] = 1'bX;
end 
// expected Result[ 26 ]
initial
begin
	Result_expected[26] = 1'bX;
end 
// expected Result[ 25 ]
initial
begin
	Result_expected[25] = 1'bX;
end 
// expected Result[ 24 ]
initial
begin
	Result_expected[24] = 1'bX;
end 
// expected Result[ 23 ]
initial
begin
	Result_expected[23] = 1'bX;
end 
// expected Result[ 22 ]
initial
begin
	Result_expected[22] = 1'bX;
end 
// expected Result[ 21 ]
initial
begin
	Result_expected[21] = 1'bX;
end 
// expected Result[ 20 ]
initial
begin
	Result_expected[20] = 1'bX;
end 
// expected Result[ 19 ]
initial
begin
	Result_expected[19] = 1'bX;
end 
// expected Result[ 18 ]
initial
begin
	Result_expected[18] = 1'bX;
end 
// expected Result[ 17 ]
initial
begin
	Result_expected[17] = 1'bX;
end 
// expected Result[ 16 ]
initial
begin
	Result_expected[16] = 1'bX;
end 
// expected Result[ 15 ]
initial
begin
	Result_expected[15] = 1'bX;
end 
// expected Result[ 14 ]
initial
begin
	Result_expected[14] = 1'bX;
end 
// expected Result[ 13 ]
initial
begin
	Result_expected[13] = 1'bX;
end 
// expected Result[ 12 ]
initial
begin
	Result_expected[12] = 1'bX;
end 
// expected Result[ 11 ]
initial
begin
	Result_expected[11] = 1'bX;
end 
// expected Result[ 10 ]
initial
begin
	Result_expected[10] = 1'bX;
end 
// expected Result[ 9 ]
initial
begin
	Result_expected[9] = 1'bX;
end 
// expected Result[ 8 ]
initial
begin
	Result_expected[8] = 1'bX;
end 
// expected Result[ 7 ]
initial
begin
	Result_expected[7] = 1'bX;
end 
// expected Result[ 6 ]
initial
begin
	Result_expected[6] = 1'bX;
end 
// expected Result[ 5 ]
initial
begin
	Result_expected[5] = 1'bX;
end 
// expected Result[ 4 ]
initial
begin
	Result_expected[4] = 1'bX;
end 
// expected Result[ 3 ]
initial
begin
	Result_expected[3] = 1'bX;
end 
// expected Result[ 2 ]
initial
begin
	Result_expected[2] = 1'bX;
end 
// expected Result[ 1 ]
initial
begin
	Result_expected[1] = 1'bX;
end 
// expected Result[ 0 ]
initial
begin
	Result_expected[0] = 1'bX;
end 
// expected Reg_1[ 31 ]
initial
begin
	Reg_1_expected[31] = 1'bX;
end 
// expected Reg_1[ 30 ]
initial
begin
	Reg_1_expected[30] = 1'bX;
end 
// expected Reg_1[ 29 ]
initial
begin
	Reg_1_expected[29] = 1'bX;
end 
// expected Reg_1[ 28 ]
initial
begin
	Reg_1_expected[28] = 1'bX;
end 
// expected Reg_1[ 27 ]
initial
begin
	Reg_1_expected[27] = 1'bX;
end 
// expected Reg_1[ 26 ]
initial
begin
	Reg_1_expected[26] = 1'bX;
end 
// expected Reg_1[ 25 ]
initial
begin
	Reg_1_expected[25] = 1'bX;
end 
// expected Reg_1[ 24 ]
initial
begin
	Reg_1_expected[24] = 1'bX;
end 
// expected Reg_1[ 23 ]
initial
begin
	Reg_1_expected[23] = 1'bX;
end 
// expected Reg_1[ 22 ]
initial
begin
	Reg_1_expected[22] = 1'bX;
end 
// expected Reg_1[ 21 ]
initial
begin
	Reg_1_expected[21] = 1'bX;
end 
// expected Reg_1[ 20 ]
initial
begin
	Reg_1_expected[20] = 1'bX;
end 
// expected Reg_1[ 19 ]
initial
begin
	Reg_1_expected[19] = 1'bX;
end 
// expected Reg_1[ 18 ]
initial
begin
	Reg_1_expected[18] = 1'bX;
end 
// expected Reg_1[ 17 ]
initial
begin
	Reg_1_expected[17] = 1'bX;
end 
// expected Reg_1[ 16 ]
initial
begin
	Reg_1_expected[16] = 1'bX;
end 
// expected Reg_1[ 15 ]
initial
begin
	Reg_1_expected[15] = 1'bX;
end 
// expected Reg_1[ 14 ]
initial
begin
	Reg_1_expected[14] = 1'bX;
end 
// expected Reg_1[ 13 ]
initial
begin
	Reg_1_expected[13] = 1'bX;
end 
// expected Reg_1[ 12 ]
initial
begin
	Reg_1_expected[12] = 1'bX;
end 
// expected Reg_1[ 11 ]
initial
begin
	Reg_1_expected[11] = 1'bX;
end 
// expected Reg_1[ 10 ]
initial
begin
	Reg_1_expected[10] = 1'bX;
end 
// expected Reg_1[ 9 ]
initial
begin
	Reg_1_expected[9] = 1'bX;
end 
// expected Reg_1[ 8 ]
initial
begin
	Reg_1_expected[8] = 1'bX;
end 
// expected Reg_1[ 7 ]
initial
begin
	Reg_1_expected[7] = 1'bX;
end 
// expected Reg_1[ 6 ]
initial
begin
	Reg_1_expected[6] = 1'bX;
end 
// expected Reg_1[ 5 ]
initial
begin
	Reg_1_expected[5] = 1'bX;
end 
// expected Reg_1[ 4 ]
initial
begin
	Reg_1_expected[4] = 1'bX;
end 
// expected Reg_1[ 3 ]
initial
begin
	Reg_1_expected[3] = 1'bX;
end 
// expected Reg_1[ 2 ]
initial
begin
	Reg_1_expected[2] = 1'bX;
end 
// expected Reg_1[ 1 ]
initial
begin
	Reg_1_expected[1] = 1'bX;
end 
// expected Reg_1[ 0 ]
initial
begin
	Reg_1_expected[0] = 1'bX;
end 
// expected Reg_2[ 31 ]
initial
begin
	Reg_2_expected[31] = 1'bX;
end 
// expected Reg_2[ 30 ]
initial
begin
	Reg_2_expected[30] = 1'bX;
end 
// expected Reg_2[ 29 ]
initial
begin
	Reg_2_expected[29] = 1'bX;
end 
// expected Reg_2[ 28 ]
initial
begin
	Reg_2_expected[28] = 1'bX;
end 
// expected Reg_2[ 27 ]
initial
begin
	Reg_2_expected[27] = 1'bX;
end 
// expected Reg_2[ 26 ]
initial
begin
	Reg_2_expected[26] = 1'bX;
end 
// expected Reg_2[ 25 ]
initial
begin
	Reg_2_expected[25] = 1'bX;
end 
// expected Reg_2[ 24 ]
initial
begin
	Reg_2_expected[24] = 1'bX;
end 
// expected Reg_2[ 23 ]
initial
begin
	Reg_2_expected[23] = 1'bX;
end 
// expected Reg_2[ 22 ]
initial
begin
	Reg_2_expected[22] = 1'bX;
end 
// expected Reg_2[ 21 ]
initial
begin
	Reg_2_expected[21] = 1'bX;
end 
// expected Reg_2[ 20 ]
initial
begin
	Reg_2_expected[20] = 1'bX;
end 
// expected Reg_2[ 19 ]
initial
begin
	Reg_2_expected[19] = 1'bX;
end 
// expected Reg_2[ 18 ]
initial
begin
	Reg_2_expected[18] = 1'bX;
end 
// expected Reg_2[ 17 ]
initial
begin
	Reg_2_expected[17] = 1'bX;
end 
// expected Reg_2[ 16 ]
initial
begin
	Reg_2_expected[16] = 1'bX;
end 
// expected Reg_2[ 15 ]
initial
begin
	Reg_2_expected[15] = 1'bX;
end 
// expected Reg_2[ 14 ]
initial
begin
	Reg_2_expected[14] = 1'bX;
end 
// expected Reg_2[ 13 ]
initial
begin
	Reg_2_expected[13] = 1'bX;
end 
// expected Reg_2[ 12 ]
initial
begin
	Reg_2_expected[12] = 1'bX;
end 
// expected Reg_2[ 11 ]
initial
begin
	Reg_2_expected[11] = 1'bX;
end 
// expected Reg_2[ 10 ]
initial
begin
	Reg_2_expected[10] = 1'bX;
end 
// expected Reg_2[ 9 ]
initial
begin
	Reg_2_expected[9] = 1'bX;
end 
// expected Reg_2[ 8 ]
initial
begin
	Reg_2_expected[8] = 1'bX;
end 
// expected Reg_2[ 7 ]
initial
begin
	Reg_2_expected[7] = 1'bX;
end 
// expected Reg_2[ 6 ]
initial
begin
	Reg_2_expected[6] = 1'bX;
end 
// expected Reg_2[ 5 ]
initial
begin
	Reg_2_expected[5] = 1'bX;
end 
// expected Reg_2[ 4 ]
initial
begin
	Reg_2_expected[4] = 1'bX;
end 
// expected Reg_2[ 3 ]
initial
begin
	Reg_2_expected[3] = 1'bX;
end 
// expected Reg_2[ 2 ]
initial
begin
	Reg_2_expected[2] = 1'bX;
end 
// expected Reg_2[ 1 ]
initial
begin
	Reg_2_expected[1] = 1'bX;
end 
// expected Reg_2[ 0 ]
initial
begin
	Reg_2_expected[0] = 1'bX;
end 
// expected n_intrucao[ 11 ]
initial
begin
	n_intrucao_expected[11] = 1'bX;
	n_intrucao_expected[11] = #19999000 1'b0;
end 
// expected n_intrucao[ 10 ]
initial
begin
	n_intrucao_expected[10] = 1'bX;
	n_intrucao_expected[10] = #19999000 1'b0;
end 
// expected n_intrucao[ 9 ]
initial
begin
	n_intrucao_expected[9] = 1'bX;
	n_intrucao_expected[9] = #19999000 1'b0;
end 
// expected n_intrucao[ 8 ]
initial
begin
	n_intrucao_expected[8] = 1'bX;
	n_intrucao_expected[8] = #19999000 1'b0;
end 
// expected n_intrucao[ 7 ]
initial
begin
	n_intrucao_expected[7] = 1'bX;
	n_intrucao_expected[7] = #19999000 1'b0;
end 
// expected n_intrucao[ 6 ]
initial
begin
	n_intrucao_expected[6] = 1'bX;
	n_intrucao_expected[6] = #19999000 1'b0;
end 
// expected n_intrucao[ 5 ]
initial
begin
	n_intrucao_expected[5] = 1'bX;
	n_intrucao_expected[5] = #19999000 1'b0;
end 
// expected n_intrucao[ 4 ]
initial
begin
	n_intrucao_expected[4] = 1'bX;
	n_intrucao_expected[4] = #19999000 1'b0;
end 
// expected n_intrucao[ 3 ]
initial
begin
	n_intrucao_expected[3] = 1'bX;
	n_intrucao_expected[3] = #19999000 1'b0;
end 
// expected n_intrucao[ 2 ]
initial
begin
	n_intrucao_expected[2] = 1'bX;
	n_intrucao_expected[2] = #19999000 1'b0;
end 
// expected n_intrucao[ 1 ]
initial
begin
	n_intrucao_expected[1] = 1'bX;
	n_intrucao_expected[1] = #19999000 1'b0;
end 
// expected n_intrucao[ 0 ]
initial
begin
	n_intrucao_expected[0] = 1'bX;
	n_intrucao_expected[0] = #19999000 1'b0;
end 
// expected instrucao[ 31 ]
initial
begin
	instrucao_expected[31] = 1'bX;
	instrucao_expected[31] = #19999000 1'b0;
end 
// expected instrucao[ 30 ]
initial
begin
	instrucao_expected[30] = 1'bX;
	instrucao_expected[30] = #19999000 1'b0;
end 
// expected instrucao[ 29 ]
initial
begin
	instrucao_expected[29] = 1'bX;
	instrucao_expected[29] = #19999000 1'b0;
end 
// expected instrucao[ 28 ]
initial
begin
	instrucao_expected[28] = 1'bX;
	instrucao_expected[28] = #19999000 1'b0;
end 
// expected instrucao[ 27 ]
initial
begin
	instrucao_expected[27] = 1'bX;
	instrucao_expected[27] = #19999000 1'b0;
end 
// expected instrucao[ 26 ]
initial
begin
	instrucao_expected[26] = 1'bX;
	instrucao_expected[26] = #19999000 1'b0;
end 
// expected instrucao[ 25 ]
initial
begin
	instrucao_expected[25] = 1'bX;
	instrucao_expected[25] = #19999000 1'b0;
end 
// expected instrucao[ 24 ]
initial
begin
	instrucao_expected[24] = 1'bX;
	instrucao_expected[24] = #19999000 1'b0;
end 
// expected instrucao[ 23 ]
initial
begin
	instrucao_expected[23] = 1'bX;
	instrucao_expected[23] = #19999000 1'b0;
end 
// expected instrucao[ 22 ]
initial
begin
	instrucao_expected[22] = 1'bX;
	instrucao_expected[22] = #19999000 1'b0;
end 
// expected instrucao[ 21 ]
initial
begin
	instrucao_expected[21] = 1'bX;
	instrucao_expected[21] = #19999000 1'b0;
end 
// expected instrucao[ 20 ]
initial
begin
	instrucao_expected[20] = 1'bX;
	instrucao_expected[20] = #19999000 1'b0;
end 
// expected instrucao[ 19 ]
initial
begin
	instrucao_expected[19] = 1'bX;
	instrucao_expected[19] = #19999000 1'b0;
end 
// expected instrucao[ 18 ]
initial
begin
	instrucao_expected[18] = 1'bX;
	instrucao_expected[18] = #19999000 1'b0;
end 
// expected instrucao[ 17 ]
initial
begin
	instrucao_expected[17] = 1'bX;
	instrucao_expected[17] = #19999000 1'b0;
end 
// expected instrucao[ 16 ]
initial
begin
	instrucao_expected[16] = 1'bX;
	instrucao_expected[16] = #19999000 1'b0;
end 
// expected instrucao[ 15 ]
initial
begin
	instrucao_expected[15] = 1'bX;
	instrucao_expected[15] = #19999000 1'b0;
end 
// expected instrucao[ 14 ]
initial
begin
	instrucao_expected[14] = 1'bX;
	instrucao_expected[14] = #19999000 1'b0;
end 
// expected instrucao[ 13 ]
initial
begin
	instrucao_expected[13] = 1'bX;
	instrucao_expected[13] = #19999000 1'b0;
end 
// expected instrucao[ 12 ]
initial
begin
	instrucao_expected[12] = 1'bX;
	instrucao_expected[12] = #19999000 1'b0;
end 
// expected instrucao[ 11 ]
initial
begin
	instrucao_expected[11] = 1'bX;
	instrucao_expected[11] = #19999000 1'b0;
end 
// expected instrucao[ 10 ]
initial
begin
	instrucao_expected[10] = 1'bX;
	instrucao_expected[10] = #19999000 1'b0;
end 
// expected instrucao[ 9 ]
initial
begin
	instrucao_expected[9] = 1'bX;
	instrucao_expected[9] = #19999000 1'b0;
end 
// expected instrucao[ 8 ]
initial
begin
	instrucao_expected[8] = 1'bX;
	instrucao_expected[8] = #19999000 1'b0;
end 
// expected instrucao[ 7 ]
initial
begin
	instrucao_expected[7] = 1'bX;
	instrucao_expected[7] = #19999000 1'b0;
end 
// expected instrucao[ 6 ]
initial
begin
	instrucao_expected[6] = 1'bX;
	instrucao_expected[6] = #19999000 1'b0;
end 
// expected instrucao[ 5 ]
initial
begin
	instrucao_expected[5] = 1'bX;
	instrucao_expected[5] = #19999000 1'b0;
end 
// expected instrucao[ 4 ]
initial
begin
	instrucao_expected[4] = 1'bX;
	instrucao_expected[4] = #19999000 1'b0;
end 
// expected instrucao[ 3 ]
initial
begin
	instrucao_expected[3] = 1'bX;
	instrucao_expected[3] = #19999000 1'b0;
end 
// expected instrucao[ 2 ]
initial
begin
	instrucao_expected[2] = 1'bX;
	instrucao_expected[2] = #19999000 1'b0;
end 
// expected instrucao[ 1 ]
initial
begin
	instrucao_expected[1] = 1'bX;
	instrucao_expected[1] = #19999000 1'b0;
end 
// expected instrucao[ 0 ]
initial
begin
	instrucao_expected[0] = 1'bX;
	instrucao_expected[0] = #19999000 1'b0;
end 
// expected VisualA[ 31 ]
initial
begin
	VisualA_expected[31] = 1'bX;
end 
// expected VisualA[ 30 ]
initial
begin
	VisualA_expected[30] = 1'bX;
end 
// expected VisualA[ 29 ]
initial
begin
	VisualA_expected[29] = 1'bX;
end 
// expected VisualA[ 28 ]
initial
begin
	VisualA_expected[28] = 1'bX;
end 
// expected VisualA[ 27 ]
initial
begin
	VisualA_expected[27] = 1'bX;
end 
// expected VisualA[ 26 ]
initial
begin
	VisualA_expected[26] = 1'bX;
end 
// expected VisualA[ 25 ]
initial
begin
	VisualA_expected[25] = 1'bX;
end 
// expected VisualA[ 24 ]
initial
begin
	VisualA_expected[24] = 1'bX;
end 
// expected VisualA[ 23 ]
initial
begin
	VisualA_expected[23] = 1'bX;
end 
// expected VisualA[ 22 ]
initial
begin
	VisualA_expected[22] = 1'bX;
end 
// expected VisualA[ 21 ]
initial
begin
	VisualA_expected[21] = 1'bX;
end 
// expected VisualA[ 20 ]
initial
begin
	VisualA_expected[20] = 1'bX;
end 
// expected VisualA[ 19 ]
initial
begin
	VisualA_expected[19] = 1'bX;
end 
// expected VisualA[ 18 ]
initial
begin
	VisualA_expected[18] = 1'bX;
end 
// expected VisualA[ 17 ]
initial
begin
	VisualA_expected[17] = 1'bX;
end 
// expected VisualA[ 16 ]
initial
begin
	VisualA_expected[16] = 1'bX;
end 
// expected VisualA[ 15 ]
initial
begin
	VisualA_expected[15] = 1'bX;
end 
// expected VisualA[ 14 ]
initial
begin
	VisualA_expected[14] = 1'bX;
end 
// expected VisualA[ 13 ]
initial
begin
	VisualA_expected[13] = 1'bX;
end 
// expected VisualA[ 12 ]
initial
begin
	VisualA_expected[12] = 1'bX;
end 
// expected VisualA[ 11 ]
initial
begin
	VisualA_expected[11] = 1'bX;
end 
// expected VisualA[ 10 ]
initial
begin
	VisualA_expected[10] = 1'bX;
end 
// expected VisualA[ 9 ]
initial
begin
	VisualA_expected[9] = 1'bX;
end 
// expected VisualA[ 8 ]
initial
begin
	VisualA_expected[8] = 1'bX;
end 
// expected VisualA[ 7 ]
initial
begin
	VisualA_expected[7] = 1'bX;
end 
// expected VisualA[ 6 ]
initial
begin
	VisualA_expected[6] = 1'bX;
end 
// expected VisualA[ 5 ]
initial
begin
	VisualA_expected[5] = 1'bX;
end 
// expected VisualA[ 4 ]
initial
begin
	VisualA_expected[4] = 1'bX;
end 
// expected VisualA[ 3 ]
initial
begin
	VisualA_expected[3] = 1'bX;
end 
// expected VisualA[ 2 ]
initial
begin
	VisualA_expected[2] = 1'bX;
end 
// expected VisualA[ 1 ]
initial
begin
	VisualA_expected[1] = 1'bX;
end 
// expected VisualA[ 0 ]
initial
begin
	VisualA_expected[0] = 1'bX;
end 
// expected VisualB[ 31 ]
initial
begin
	VisualB_expected[31] = 1'bX;
end 
// expected VisualB[ 30 ]
initial
begin
	VisualB_expected[30] = 1'bX;
end 
// expected VisualB[ 29 ]
initial
begin
	VisualB_expected[29] = 1'bX;
end 
// expected VisualB[ 28 ]
initial
begin
	VisualB_expected[28] = 1'bX;
end 
// expected VisualB[ 27 ]
initial
begin
	VisualB_expected[27] = 1'bX;
end 
// expected VisualB[ 26 ]
initial
begin
	VisualB_expected[26] = 1'bX;
end 
// expected VisualB[ 25 ]
initial
begin
	VisualB_expected[25] = 1'bX;
end 
// expected VisualB[ 24 ]
initial
begin
	VisualB_expected[24] = 1'bX;
end 
// expected VisualB[ 23 ]
initial
begin
	VisualB_expected[23] = 1'bX;
end 
// expected VisualB[ 22 ]
initial
begin
	VisualB_expected[22] = 1'bX;
end 
// expected VisualB[ 21 ]
initial
begin
	VisualB_expected[21] = 1'bX;
end 
// expected VisualB[ 20 ]
initial
begin
	VisualB_expected[20] = 1'bX;
end 
// expected VisualB[ 19 ]
initial
begin
	VisualB_expected[19] = 1'bX;
end 
// expected VisualB[ 18 ]
initial
begin
	VisualB_expected[18] = 1'bX;
end 
// expected VisualB[ 17 ]
initial
begin
	VisualB_expected[17] = 1'bX;
end 
// expected VisualB[ 16 ]
initial
begin
	VisualB_expected[16] = 1'bX;
end 
// expected VisualB[ 15 ]
initial
begin
	VisualB_expected[15] = 1'bX;
end 
// expected VisualB[ 14 ]
initial
begin
	VisualB_expected[14] = 1'bX;
end 
// expected VisualB[ 13 ]
initial
begin
	VisualB_expected[13] = 1'bX;
end 
// expected VisualB[ 12 ]
initial
begin
	VisualB_expected[12] = 1'bX;
end 
// expected VisualB[ 11 ]
initial
begin
	VisualB_expected[11] = 1'bX;
end 
// expected VisualB[ 10 ]
initial
begin
	VisualB_expected[10] = 1'bX;
end 
// expected VisualB[ 9 ]
initial
begin
	VisualB_expected[9] = 1'bX;
end 
// expected VisualB[ 8 ]
initial
begin
	VisualB_expected[8] = 1'bX;
end 
// expected VisualB[ 7 ]
initial
begin
	VisualB_expected[7] = 1'bX;
end 
// expected VisualB[ 6 ]
initial
begin
	VisualB_expected[6] = 1'bX;
end 
// expected VisualB[ 5 ]
initial
begin
	VisualB_expected[5] = 1'bX;
end 
// expected VisualB[ 4 ]
initial
begin
	VisualB_expected[4] = 1'bX;
end 
// expected VisualB[ 3 ]
initial
begin
	VisualB_expected[3] = 1'bX;
end 
// expected VisualB[ 2 ]
initial
begin
	VisualB_expected[2] = 1'bX;
end 
// expected VisualB[ 1 ]
initial
begin
	VisualB_expected[1] = 1'bX;
end 
// expected VisualB[ 0 ]
initial
begin
	VisualB_expected[0] = 1'bX;
end 
// expected VisualC[ 31 ]
initial
begin
	VisualC_expected[31] = 1'bX;
end 
// expected VisualC[ 30 ]
initial
begin
	VisualC_expected[30] = 1'bX;
end 
// expected VisualC[ 29 ]
initial
begin
	VisualC_expected[29] = 1'bX;
end 
// expected VisualC[ 28 ]
initial
begin
	VisualC_expected[28] = 1'bX;
end 
// expected VisualC[ 27 ]
initial
begin
	VisualC_expected[27] = 1'bX;
end 
// expected VisualC[ 26 ]
initial
begin
	VisualC_expected[26] = 1'bX;
end 
// expected VisualC[ 25 ]
initial
begin
	VisualC_expected[25] = 1'bX;
end 
// expected VisualC[ 24 ]
initial
begin
	VisualC_expected[24] = 1'bX;
end 
// expected VisualC[ 23 ]
initial
begin
	VisualC_expected[23] = 1'bX;
end 
// expected VisualC[ 22 ]
initial
begin
	VisualC_expected[22] = 1'bX;
end 
// expected VisualC[ 21 ]
initial
begin
	VisualC_expected[21] = 1'bX;
end 
// expected VisualC[ 20 ]
initial
begin
	VisualC_expected[20] = 1'bX;
end 
// expected VisualC[ 19 ]
initial
begin
	VisualC_expected[19] = 1'bX;
end 
// expected VisualC[ 18 ]
initial
begin
	VisualC_expected[18] = 1'bX;
end 
// expected VisualC[ 17 ]
initial
begin
	VisualC_expected[17] = 1'bX;
end 
// expected VisualC[ 16 ]
initial
begin
	VisualC_expected[16] = 1'bX;
end 
// expected VisualC[ 15 ]
initial
begin
	VisualC_expected[15] = 1'bX;
end 
// expected VisualC[ 14 ]
initial
begin
	VisualC_expected[14] = 1'bX;
end 
// expected VisualC[ 13 ]
initial
begin
	VisualC_expected[13] = 1'bX;
end 
// expected VisualC[ 12 ]
initial
begin
	VisualC_expected[12] = 1'bX;
end 
// expected VisualC[ 11 ]
initial
begin
	VisualC_expected[11] = 1'bX;
end 
// expected VisualC[ 10 ]
initial
begin
	VisualC_expected[10] = 1'bX;
end 
// expected VisualC[ 9 ]
initial
begin
	VisualC_expected[9] = 1'bX;
end 
// expected VisualC[ 8 ]
initial
begin
	VisualC_expected[8] = 1'bX;
end 
// expected VisualC[ 7 ]
initial
begin
	VisualC_expected[7] = 1'bX;
end 
// expected VisualC[ 6 ]
initial
begin
	VisualC_expected[6] = 1'bX;
end 
// expected VisualC[ 5 ]
initial
begin
	VisualC_expected[5] = 1'bX;
end 
// expected VisualC[ 4 ]
initial
begin
	VisualC_expected[4] = 1'bX;
end 
// expected VisualC[ 3 ]
initial
begin
	VisualC_expected[3] = 1'bX;
end 
// expected VisualC[ 2 ]
initial
begin
	VisualC_expected[2] = 1'bX;
end 
// expected VisualC[ 1 ]
initial
begin
	VisualC_expected[1] = 1'bX;
end 
// expected VisualC[ 0 ]
initial
begin
	VisualC_expected[0] = 1'bX;
end 
// expected VisualD[ 31 ]
initial
begin
	VisualD_expected[31] = 1'bX;
end 
// expected VisualD[ 30 ]
initial
begin
	VisualD_expected[30] = 1'bX;
end 
// expected VisualD[ 29 ]
initial
begin
	VisualD_expected[29] = 1'bX;
end 
// expected VisualD[ 28 ]
initial
begin
	VisualD_expected[28] = 1'bX;
end 
// expected VisualD[ 27 ]
initial
begin
	VisualD_expected[27] = 1'bX;
end 
// expected VisualD[ 26 ]
initial
begin
	VisualD_expected[26] = 1'bX;
end 
// expected VisualD[ 25 ]
initial
begin
	VisualD_expected[25] = 1'bX;
end 
// expected VisualD[ 24 ]
initial
begin
	VisualD_expected[24] = 1'bX;
end 
// expected VisualD[ 23 ]
initial
begin
	VisualD_expected[23] = 1'bX;
end 
// expected VisualD[ 22 ]
initial
begin
	VisualD_expected[22] = 1'bX;
end 
// expected VisualD[ 21 ]
initial
begin
	VisualD_expected[21] = 1'bX;
end 
// expected VisualD[ 20 ]
initial
begin
	VisualD_expected[20] = 1'bX;
end 
// expected VisualD[ 19 ]
initial
begin
	VisualD_expected[19] = 1'bX;
end 
// expected VisualD[ 18 ]
initial
begin
	VisualD_expected[18] = 1'bX;
end 
// expected VisualD[ 17 ]
initial
begin
	VisualD_expected[17] = 1'bX;
end 
// expected VisualD[ 16 ]
initial
begin
	VisualD_expected[16] = 1'bX;
end 
// expected VisualD[ 15 ]
initial
begin
	VisualD_expected[15] = 1'bX;
end 
// expected VisualD[ 14 ]
initial
begin
	VisualD_expected[14] = 1'bX;
end 
// expected VisualD[ 13 ]
initial
begin
	VisualD_expected[13] = 1'bX;
end 
// expected VisualD[ 12 ]
initial
begin
	VisualD_expected[12] = 1'bX;
end 
// expected VisualD[ 11 ]
initial
begin
	VisualD_expected[11] = 1'bX;
end 
// expected VisualD[ 10 ]
initial
begin
	VisualD_expected[10] = 1'bX;
end 
// expected VisualD[ 9 ]
initial
begin
	VisualD_expected[9] = 1'bX;
end 
// expected VisualD[ 8 ]
initial
begin
	VisualD_expected[8] = 1'bX;
end 
// expected VisualD[ 7 ]
initial
begin
	VisualD_expected[7] = 1'bX;
end 
// expected VisualD[ 6 ]
initial
begin
	VisualD_expected[6] = 1'bX;
end 
// expected VisualD[ 5 ]
initial
begin
	VisualD_expected[5] = 1'bX;
end 
// expected VisualD[ 4 ]
initial
begin
	VisualD_expected[4] = 1'bX;
end 
// expected VisualD[ 3 ]
initial
begin
	VisualD_expected[3] = 1'bX;
end 
// expected VisualD[ 2 ]
initial
begin
	VisualD_expected[2] = 1'bX;
end 
// expected VisualD[ 1 ]
initial
begin
	VisualD_expected[1] = 1'bX;
end 
// expected VisualD[ 0 ]
initial
begin
	VisualD_expected[0] = 1'bX;
end 
// expected VisualE[ 31 ]
initial
begin
	VisualE_expected[31] = 1'bX;
end 
// expected VisualE[ 30 ]
initial
begin
	VisualE_expected[30] = 1'bX;
end 
// expected VisualE[ 29 ]
initial
begin
	VisualE_expected[29] = 1'bX;
end 
// expected VisualE[ 28 ]
initial
begin
	VisualE_expected[28] = 1'bX;
end 
// expected VisualE[ 27 ]
initial
begin
	VisualE_expected[27] = 1'bX;
end 
// expected VisualE[ 26 ]
initial
begin
	VisualE_expected[26] = 1'bX;
end 
// expected VisualE[ 25 ]
initial
begin
	VisualE_expected[25] = 1'bX;
end 
// expected VisualE[ 24 ]
initial
begin
	VisualE_expected[24] = 1'bX;
end 
// expected VisualE[ 23 ]
initial
begin
	VisualE_expected[23] = 1'bX;
end 
// expected VisualE[ 22 ]
initial
begin
	VisualE_expected[22] = 1'bX;
end 
// expected VisualE[ 21 ]
initial
begin
	VisualE_expected[21] = 1'bX;
end 
// expected VisualE[ 20 ]
initial
begin
	VisualE_expected[20] = 1'bX;
end 
// expected VisualE[ 19 ]
initial
begin
	VisualE_expected[19] = 1'bX;
end 
// expected VisualE[ 18 ]
initial
begin
	VisualE_expected[18] = 1'bX;
end 
// expected VisualE[ 17 ]
initial
begin
	VisualE_expected[17] = 1'bX;
end 
// expected VisualE[ 16 ]
initial
begin
	VisualE_expected[16] = 1'bX;
end 
// expected VisualE[ 15 ]
initial
begin
	VisualE_expected[15] = 1'bX;
end 
// expected VisualE[ 14 ]
initial
begin
	VisualE_expected[14] = 1'bX;
end 
// expected VisualE[ 13 ]
initial
begin
	VisualE_expected[13] = 1'bX;
end 
// expected VisualE[ 12 ]
initial
begin
	VisualE_expected[12] = 1'bX;
end 
// expected VisualE[ 11 ]
initial
begin
	VisualE_expected[11] = 1'bX;
end 
// expected VisualE[ 10 ]
initial
begin
	VisualE_expected[10] = 1'bX;
end 
// expected VisualE[ 9 ]
initial
begin
	VisualE_expected[9] = 1'bX;
end 
// expected VisualE[ 8 ]
initial
begin
	VisualE_expected[8] = 1'bX;
end 
// expected VisualE[ 7 ]
initial
begin
	VisualE_expected[7] = 1'bX;
end 
// expected VisualE[ 6 ]
initial
begin
	VisualE_expected[6] = 1'bX;
end 
// expected VisualE[ 5 ]
initial
begin
	VisualE_expected[5] = 1'bX;
end 
// expected VisualE[ 4 ]
initial
begin
	VisualE_expected[4] = 1'bX;
end 
// expected VisualE[ 3 ]
initial
begin
	VisualE_expected[3] = 1'bX;
end 
// expected VisualE[ 2 ]
initial
begin
	VisualE_expected[2] = 1'bX;
end 
// expected VisualE[ 1 ]
initial
begin
	VisualE_expected[1] = 1'bX;
end 
// expected VisualE[ 0 ]
initial
begin
	VisualE_expected[0] = 1'bX;
end 
// expected VisualF[ 31 ]
initial
begin
	VisualF_expected[31] = 1'bX;
end 
// expected VisualF[ 30 ]
initial
begin
	VisualF_expected[30] = 1'bX;
end 
// expected VisualF[ 29 ]
initial
begin
	VisualF_expected[29] = 1'bX;
end 
// expected VisualF[ 28 ]
initial
begin
	VisualF_expected[28] = 1'bX;
end 
// expected VisualF[ 27 ]
initial
begin
	VisualF_expected[27] = 1'bX;
end 
// expected VisualF[ 26 ]
initial
begin
	VisualF_expected[26] = 1'bX;
end 
// expected VisualF[ 25 ]
initial
begin
	VisualF_expected[25] = 1'bX;
end 
// expected VisualF[ 24 ]
initial
begin
	VisualF_expected[24] = 1'bX;
end 
// expected VisualF[ 23 ]
initial
begin
	VisualF_expected[23] = 1'bX;
end 
// expected VisualF[ 22 ]
initial
begin
	VisualF_expected[22] = 1'bX;
end 
// expected VisualF[ 21 ]
initial
begin
	VisualF_expected[21] = 1'bX;
end 
// expected VisualF[ 20 ]
initial
begin
	VisualF_expected[20] = 1'bX;
end 
// expected VisualF[ 19 ]
initial
begin
	VisualF_expected[19] = 1'bX;
end 
// expected VisualF[ 18 ]
initial
begin
	VisualF_expected[18] = 1'bX;
end 
// expected VisualF[ 17 ]
initial
begin
	VisualF_expected[17] = 1'bX;
end 
// expected VisualF[ 16 ]
initial
begin
	VisualF_expected[16] = 1'bX;
end 
// expected VisualF[ 15 ]
initial
begin
	VisualF_expected[15] = 1'bX;
end 
// expected VisualF[ 14 ]
initial
begin
	VisualF_expected[14] = 1'bX;
end 
// expected VisualF[ 13 ]
initial
begin
	VisualF_expected[13] = 1'bX;
end 
// expected VisualF[ 12 ]
initial
begin
	VisualF_expected[12] = 1'bX;
end 
// expected VisualF[ 11 ]
initial
begin
	VisualF_expected[11] = 1'bX;
end 
// expected VisualF[ 10 ]
initial
begin
	VisualF_expected[10] = 1'bX;
end 
// expected VisualF[ 9 ]
initial
begin
	VisualF_expected[9] = 1'bX;
end 
// expected VisualF[ 8 ]
initial
begin
	VisualF_expected[8] = 1'bX;
end 
// expected VisualF[ 7 ]
initial
begin
	VisualF_expected[7] = 1'bX;
end 
// expected VisualF[ 6 ]
initial
begin
	VisualF_expected[6] = 1'bX;
end 
// expected VisualF[ 5 ]
initial
begin
	VisualF_expected[5] = 1'bX;
end 
// expected VisualF[ 4 ]
initial
begin
	VisualF_expected[4] = 1'bX;
end 
// expected VisualF[ 3 ]
initial
begin
	VisualF_expected[3] = 1'bX;
end 
// expected VisualF[ 2 ]
initial
begin
	VisualF_expected[2] = 1'bX;
end 
// expected VisualF[ 1 ]
initial
begin
	VisualF_expected[1] = 1'bX;
end 
// expected VisualF[ 0 ]
initial
begin
	VisualF_expected[0] = 1'bX;
end 
// expected Data_in_reg[ 31 ]
initial
begin
	Data_in_reg_expected[31] = 1'bX;
end 
// expected Data_in_reg[ 30 ]
initial
begin
	Data_in_reg_expected[30] = 1'bX;
end 
// expected Data_in_reg[ 29 ]
initial
begin
	Data_in_reg_expected[29] = 1'bX;
end 
// expected Data_in_reg[ 28 ]
initial
begin
	Data_in_reg_expected[28] = 1'bX;
end 
// expected Data_in_reg[ 27 ]
initial
begin
	Data_in_reg_expected[27] = 1'bX;
end 
// expected Data_in_reg[ 26 ]
initial
begin
	Data_in_reg_expected[26] = 1'bX;
end 
// expected Data_in_reg[ 25 ]
initial
begin
	Data_in_reg_expected[25] = 1'bX;
end 
// expected Data_in_reg[ 24 ]
initial
begin
	Data_in_reg_expected[24] = 1'bX;
end 
// expected Data_in_reg[ 23 ]
initial
begin
	Data_in_reg_expected[23] = 1'bX;
end 
// expected Data_in_reg[ 22 ]
initial
begin
	Data_in_reg_expected[22] = 1'bX;
end 
// expected Data_in_reg[ 21 ]
initial
begin
	Data_in_reg_expected[21] = 1'bX;
end 
// expected Data_in_reg[ 20 ]
initial
begin
	Data_in_reg_expected[20] = 1'bX;
end 
// expected Data_in_reg[ 19 ]
initial
begin
	Data_in_reg_expected[19] = 1'bX;
end 
// expected Data_in_reg[ 18 ]
initial
begin
	Data_in_reg_expected[18] = 1'bX;
end 
// expected Data_in_reg[ 17 ]
initial
begin
	Data_in_reg_expected[17] = 1'bX;
end 
// expected Data_in_reg[ 16 ]
initial
begin
	Data_in_reg_expected[16] = 1'bX;
end 
// expected Data_in_reg[ 15 ]
initial
begin
	Data_in_reg_expected[15] = 1'bX;
end 
// expected Data_in_reg[ 14 ]
initial
begin
	Data_in_reg_expected[14] = 1'bX;
end 
// expected Data_in_reg[ 13 ]
initial
begin
	Data_in_reg_expected[13] = 1'bX;
end 
// expected Data_in_reg[ 12 ]
initial
begin
	Data_in_reg_expected[12] = 1'bX;
end 
// expected Data_in_reg[ 11 ]
initial
begin
	Data_in_reg_expected[11] = 1'bX;
end 
// expected Data_in_reg[ 10 ]
initial
begin
	Data_in_reg_expected[10] = 1'bX;
end 
// expected Data_in_reg[ 9 ]
initial
begin
	Data_in_reg_expected[9] = 1'bX;
end 
// expected Data_in_reg[ 8 ]
initial
begin
	Data_in_reg_expected[8] = 1'bX;
end 
// expected Data_in_reg[ 7 ]
initial
begin
	Data_in_reg_expected[7] = 1'bX;
end 
// expected Data_in_reg[ 6 ]
initial
begin
	Data_in_reg_expected[6] = 1'bX;
end 
// expected Data_in_reg[ 5 ]
initial
begin
	Data_in_reg_expected[5] = 1'bX;
end 
// expected Data_in_reg[ 4 ]
initial
begin
	Data_in_reg_expected[4] = 1'bX;
end 
// expected Data_in_reg[ 3 ]
initial
begin
	Data_in_reg_expected[3] = 1'bX;
end 
// expected Data_in_reg[ 2 ]
initial
begin
	Data_in_reg_expected[2] = 1'bX;
end 
// expected Data_in_reg[ 1 ]
initial
begin
	Data_in_reg_expected[1] = 1'bX;
end 
// expected Data_in_reg[ 0 ]
initial
begin
	Data_in_reg_expected[0] = 1'bX;
end 
// generate trigger
always @(Ch_select_pc_expected or Ch_select_pc or Data_in_reg_expected or Data_in_reg or ent2_expected or ent2 or instrucao_expected or instrucao or n_intrucao_expected or n_intrucao or Opalu_expected or Opalu or Overflow_expected or Overflow or Reg_1_expected or Reg_1 or Reg_2_expected or Reg_2 or Result_expected or Result or VisualA_expected or VisualA or VisualB_expected or VisualB or VisualC_expected or VisualC or VisualD_expected or VisualD or VisualE_expected or VisualE or VisualF_expected or VisualF or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ch_select_pc = %b | expected Data_in_reg = %b | expected ent2 = %b | expected instrucao = %b | expected n_intrucao = %b | expected Opalu = %b | expected Overflow = %b | expected Reg_1 = %b | expected Reg_2 = %b | expected Result = %b | expected VisualA = %b | expected VisualB = %b | expected VisualC = %b | expected VisualD = %b | expected VisualE = %b | expected VisualF = %b | expected zero = %b | ",Ch_select_pc_expected_prev,Data_in_reg_expected_prev,ent2_expected_prev,instrucao_expected_prev,n_intrucao_expected_prev,Opalu_expected_prev,Overflow_expected_prev,Reg_1_expected_prev,Reg_2_expected_prev,Result_expected_prev,VisualA_expected_prev,VisualB_expected_prev,VisualC_expected_prev,VisualD_expected_prev,VisualE_expected_prev,VisualF_expected_prev,zero_expected_prev);
	$display("| real Ch_select_pc = %b | real Data_in_reg = %b | real ent2 = %b | real instrucao = %b | real n_intrucao = %b | real Opalu = %b | real Overflow = %b | real Reg_1 = %b | real Reg_2 = %b | real Result = %b | real VisualA = %b | real VisualB = %b | real VisualC = %b | real VisualD = %b | real VisualE = %b | real VisualF = %b | real zero = %b | ",Ch_select_pc_prev,Data_in_reg_prev,ent2_prev,instrucao_prev,n_intrucao_prev,Opalu_prev,Overflow_prev,Reg_1_prev,Reg_2_prev,Result_prev,VisualA_prev,VisualB_prev,VisualC_prev,VisualD_prev,VisualE_prev,VisualF_prev,zero_prev);
`endif
	if (
		( Ch_select_pc_expected_prev[0] !== 1'bx ) && ( Ch_select_pc_prev[0] !== Ch_select_pc_expected_prev[0] )
		&& ((Ch_select_pc_expected_prev[0] !== last_Ch_select_pc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ch_select_pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ch_select_pc_expected_prev);
		$display ("     Real value = %b", Ch_select_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ch_select_pc_exp[0] = Ch_select_pc_expected_prev[0];
	end
	if (
		( Ch_select_pc_expected_prev[1] !== 1'bx ) && ( Ch_select_pc_prev[1] !== Ch_select_pc_expected_prev[1] )
		&& ((Ch_select_pc_expected_prev[1] !== last_Ch_select_pc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ch_select_pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ch_select_pc_expected_prev);
		$display ("     Real value = %b", Ch_select_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ch_select_pc_exp[1] = Ch_select_pc_expected_prev[1];
	end
	if (
		( Ch_select_pc_expected_prev[2] !== 1'bx ) && ( Ch_select_pc_prev[2] !== Ch_select_pc_expected_prev[2] )
		&& ((Ch_select_pc_expected_prev[2] !== last_Ch_select_pc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ch_select_pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ch_select_pc_expected_prev);
		$display ("     Real value = %b", Ch_select_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ch_select_pc_exp[2] = Ch_select_pc_expected_prev[2];
	end
	if (
		( Data_in_reg_expected_prev[0] !== 1'bx ) && ( Data_in_reg_prev[0] !== Data_in_reg_expected_prev[0] )
		&& ((Data_in_reg_expected_prev[0] !== last_Data_in_reg_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[0] = Data_in_reg_expected_prev[0];
	end
	if (
		( Data_in_reg_expected_prev[1] !== 1'bx ) && ( Data_in_reg_prev[1] !== Data_in_reg_expected_prev[1] )
		&& ((Data_in_reg_expected_prev[1] !== last_Data_in_reg_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[1] = Data_in_reg_expected_prev[1];
	end
	if (
		( Data_in_reg_expected_prev[2] !== 1'bx ) && ( Data_in_reg_prev[2] !== Data_in_reg_expected_prev[2] )
		&& ((Data_in_reg_expected_prev[2] !== last_Data_in_reg_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[2] = Data_in_reg_expected_prev[2];
	end
	if (
		( Data_in_reg_expected_prev[3] !== 1'bx ) && ( Data_in_reg_prev[3] !== Data_in_reg_expected_prev[3] )
		&& ((Data_in_reg_expected_prev[3] !== last_Data_in_reg_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[3] = Data_in_reg_expected_prev[3];
	end
	if (
		( Data_in_reg_expected_prev[4] !== 1'bx ) && ( Data_in_reg_prev[4] !== Data_in_reg_expected_prev[4] )
		&& ((Data_in_reg_expected_prev[4] !== last_Data_in_reg_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[4] = Data_in_reg_expected_prev[4];
	end
	if (
		( Data_in_reg_expected_prev[5] !== 1'bx ) && ( Data_in_reg_prev[5] !== Data_in_reg_expected_prev[5] )
		&& ((Data_in_reg_expected_prev[5] !== last_Data_in_reg_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[5] = Data_in_reg_expected_prev[5];
	end
	if (
		( Data_in_reg_expected_prev[6] !== 1'bx ) && ( Data_in_reg_prev[6] !== Data_in_reg_expected_prev[6] )
		&& ((Data_in_reg_expected_prev[6] !== last_Data_in_reg_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[6] = Data_in_reg_expected_prev[6];
	end
	if (
		( Data_in_reg_expected_prev[7] !== 1'bx ) && ( Data_in_reg_prev[7] !== Data_in_reg_expected_prev[7] )
		&& ((Data_in_reg_expected_prev[7] !== last_Data_in_reg_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[7] = Data_in_reg_expected_prev[7];
	end
	if (
		( Data_in_reg_expected_prev[8] !== 1'bx ) && ( Data_in_reg_prev[8] !== Data_in_reg_expected_prev[8] )
		&& ((Data_in_reg_expected_prev[8] !== last_Data_in_reg_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[8] = Data_in_reg_expected_prev[8];
	end
	if (
		( Data_in_reg_expected_prev[9] !== 1'bx ) && ( Data_in_reg_prev[9] !== Data_in_reg_expected_prev[9] )
		&& ((Data_in_reg_expected_prev[9] !== last_Data_in_reg_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[9] = Data_in_reg_expected_prev[9];
	end
	if (
		( Data_in_reg_expected_prev[10] !== 1'bx ) && ( Data_in_reg_prev[10] !== Data_in_reg_expected_prev[10] )
		&& ((Data_in_reg_expected_prev[10] !== last_Data_in_reg_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[10] = Data_in_reg_expected_prev[10];
	end
	if (
		( Data_in_reg_expected_prev[11] !== 1'bx ) && ( Data_in_reg_prev[11] !== Data_in_reg_expected_prev[11] )
		&& ((Data_in_reg_expected_prev[11] !== last_Data_in_reg_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[11] = Data_in_reg_expected_prev[11];
	end
	if (
		( Data_in_reg_expected_prev[12] !== 1'bx ) && ( Data_in_reg_prev[12] !== Data_in_reg_expected_prev[12] )
		&& ((Data_in_reg_expected_prev[12] !== last_Data_in_reg_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[12] = Data_in_reg_expected_prev[12];
	end
	if (
		( Data_in_reg_expected_prev[13] !== 1'bx ) && ( Data_in_reg_prev[13] !== Data_in_reg_expected_prev[13] )
		&& ((Data_in_reg_expected_prev[13] !== last_Data_in_reg_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[13] = Data_in_reg_expected_prev[13];
	end
	if (
		( Data_in_reg_expected_prev[14] !== 1'bx ) && ( Data_in_reg_prev[14] !== Data_in_reg_expected_prev[14] )
		&& ((Data_in_reg_expected_prev[14] !== last_Data_in_reg_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[14] = Data_in_reg_expected_prev[14];
	end
	if (
		( Data_in_reg_expected_prev[15] !== 1'bx ) && ( Data_in_reg_prev[15] !== Data_in_reg_expected_prev[15] )
		&& ((Data_in_reg_expected_prev[15] !== last_Data_in_reg_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[15] = Data_in_reg_expected_prev[15];
	end
	if (
		( Data_in_reg_expected_prev[16] !== 1'bx ) && ( Data_in_reg_prev[16] !== Data_in_reg_expected_prev[16] )
		&& ((Data_in_reg_expected_prev[16] !== last_Data_in_reg_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[16] = Data_in_reg_expected_prev[16];
	end
	if (
		( Data_in_reg_expected_prev[17] !== 1'bx ) && ( Data_in_reg_prev[17] !== Data_in_reg_expected_prev[17] )
		&& ((Data_in_reg_expected_prev[17] !== last_Data_in_reg_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[17] = Data_in_reg_expected_prev[17];
	end
	if (
		( Data_in_reg_expected_prev[18] !== 1'bx ) && ( Data_in_reg_prev[18] !== Data_in_reg_expected_prev[18] )
		&& ((Data_in_reg_expected_prev[18] !== last_Data_in_reg_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[18] = Data_in_reg_expected_prev[18];
	end
	if (
		( Data_in_reg_expected_prev[19] !== 1'bx ) && ( Data_in_reg_prev[19] !== Data_in_reg_expected_prev[19] )
		&& ((Data_in_reg_expected_prev[19] !== last_Data_in_reg_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[19] = Data_in_reg_expected_prev[19];
	end
	if (
		( Data_in_reg_expected_prev[20] !== 1'bx ) && ( Data_in_reg_prev[20] !== Data_in_reg_expected_prev[20] )
		&& ((Data_in_reg_expected_prev[20] !== last_Data_in_reg_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[20] = Data_in_reg_expected_prev[20];
	end
	if (
		( Data_in_reg_expected_prev[21] !== 1'bx ) && ( Data_in_reg_prev[21] !== Data_in_reg_expected_prev[21] )
		&& ((Data_in_reg_expected_prev[21] !== last_Data_in_reg_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[21] = Data_in_reg_expected_prev[21];
	end
	if (
		( Data_in_reg_expected_prev[22] !== 1'bx ) && ( Data_in_reg_prev[22] !== Data_in_reg_expected_prev[22] )
		&& ((Data_in_reg_expected_prev[22] !== last_Data_in_reg_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[22] = Data_in_reg_expected_prev[22];
	end
	if (
		( Data_in_reg_expected_prev[23] !== 1'bx ) && ( Data_in_reg_prev[23] !== Data_in_reg_expected_prev[23] )
		&& ((Data_in_reg_expected_prev[23] !== last_Data_in_reg_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[23] = Data_in_reg_expected_prev[23];
	end
	if (
		( Data_in_reg_expected_prev[24] !== 1'bx ) && ( Data_in_reg_prev[24] !== Data_in_reg_expected_prev[24] )
		&& ((Data_in_reg_expected_prev[24] !== last_Data_in_reg_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[24] = Data_in_reg_expected_prev[24];
	end
	if (
		( Data_in_reg_expected_prev[25] !== 1'bx ) && ( Data_in_reg_prev[25] !== Data_in_reg_expected_prev[25] )
		&& ((Data_in_reg_expected_prev[25] !== last_Data_in_reg_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[25] = Data_in_reg_expected_prev[25];
	end
	if (
		( Data_in_reg_expected_prev[26] !== 1'bx ) && ( Data_in_reg_prev[26] !== Data_in_reg_expected_prev[26] )
		&& ((Data_in_reg_expected_prev[26] !== last_Data_in_reg_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[26] = Data_in_reg_expected_prev[26];
	end
	if (
		( Data_in_reg_expected_prev[27] !== 1'bx ) && ( Data_in_reg_prev[27] !== Data_in_reg_expected_prev[27] )
		&& ((Data_in_reg_expected_prev[27] !== last_Data_in_reg_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[27] = Data_in_reg_expected_prev[27];
	end
	if (
		( Data_in_reg_expected_prev[28] !== 1'bx ) && ( Data_in_reg_prev[28] !== Data_in_reg_expected_prev[28] )
		&& ((Data_in_reg_expected_prev[28] !== last_Data_in_reg_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[28] = Data_in_reg_expected_prev[28];
	end
	if (
		( Data_in_reg_expected_prev[29] !== 1'bx ) && ( Data_in_reg_prev[29] !== Data_in_reg_expected_prev[29] )
		&& ((Data_in_reg_expected_prev[29] !== last_Data_in_reg_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[29] = Data_in_reg_expected_prev[29];
	end
	if (
		( Data_in_reg_expected_prev[30] !== 1'bx ) && ( Data_in_reg_prev[30] !== Data_in_reg_expected_prev[30] )
		&& ((Data_in_reg_expected_prev[30] !== last_Data_in_reg_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[30] = Data_in_reg_expected_prev[30];
	end
	if (
		( Data_in_reg_expected_prev[31] !== 1'bx ) && ( Data_in_reg_prev[31] !== Data_in_reg_expected_prev[31] )
		&& ((Data_in_reg_expected_prev[31] !== last_Data_in_reg_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_in_reg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_in_reg_expected_prev);
		$display ("     Real value = %b", Data_in_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_in_reg_exp[31] = Data_in_reg_expected_prev[31];
	end
	if (
		( ent2_expected_prev[0] !== 1'bx ) && ( ent2_prev[0] !== ent2_expected_prev[0] )
		&& ((ent2_expected_prev[0] !== last_ent2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[0] = ent2_expected_prev[0];
	end
	if (
		( ent2_expected_prev[1] !== 1'bx ) && ( ent2_prev[1] !== ent2_expected_prev[1] )
		&& ((ent2_expected_prev[1] !== last_ent2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[1] = ent2_expected_prev[1];
	end
	if (
		( ent2_expected_prev[2] !== 1'bx ) && ( ent2_prev[2] !== ent2_expected_prev[2] )
		&& ((ent2_expected_prev[2] !== last_ent2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[2] = ent2_expected_prev[2];
	end
	if (
		( ent2_expected_prev[3] !== 1'bx ) && ( ent2_prev[3] !== ent2_expected_prev[3] )
		&& ((ent2_expected_prev[3] !== last_ent2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[3] = ent2_expected_prev[3];
	end
	if (
		( ent2_expected_prev[4] !== 1'bx ) && ( ent2_prev[4] !== ent2_expected_prev[4] )
		&& ((ent2_expected_prev[4] !== last_ent2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[4] = ent2_expected_prev[4];
	end
	if (
		( ent2_expected_prev[5] !== 1'bx ) && ( ent2_prev[5] !== ent2_expected_prev[5] )
		&& ((ent2_expected_prev[5] !== last_ent2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[5] = ent2_expected_prev[5];
	end
	if (
		( ent2_expected_prev[6] !== 1'bx ) && ( ent2_prev[6] !== ent2_expected_prev[6] )
		&& ((ent2_expected_prev[6] !== last_ent2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[6] = ent2_expected_prev[6];
	end
	if (
		( ent2_expected_prev[7] !== 1'bx ) && ( ent2_prev[7] !== ent2_expected_prev[7] )
		&& ((ent2_expected_prev[7] !== last_ent2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[7] = ent2_expected_prev[7];
	end
	if (
		( ent2_expected_prev[8] !== 1'bx ) && ( ent2_prev[8] !== ent2_expected_prev[8] )
		&& ((ent2_expected_prev[8] !== last_ent2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[8] = ent2_expected_prev[8];
	end
	if (
		( ent2_expected_prev[9] !== 1'bx ) && ( ent2_prev[9] !== ent2_expected_prev[9] )
		&& ((ent2_expected_prev[9] !== last_ent2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[9] = ent2_expected_prev[9];
	end
	if (
		( ent2_expected_prev[10] !== 1'bx ) && ( ent2_prev[10] !== ent2_expected_prev[10] )
		&& ((ent2_expected_prev[10] !== last_ent2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[10] = ent2_expected_prev[10];
	end
	if (
		( ent2_expected_prev[11] !== 1'bx ) && ( ent2_prev[11] !== ent2_expected_prev[11] )
		&& ((ent2_expected_prev[11] !== last_ent2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[11] = ent2_expected_prev[11];
	end
	if (
		( ent2_expected_prev[12] !== 1'bx ) && ( ent2_prev[12] !== ent2_expected_prev[12] )
		&& ((ent2_expected_prev[12] !== last_ent2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[12] = ent2_expected_prev[12];
	end
	if (
		( ent2_expected_prev[13] !== 1'bx ) && ( ent2_prev[13] !== ent2_expected_prev[13] )
		&& ((ent2_expected_prev[13] !== last_ent2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[13] = ent2_expected_prev[13];
	end
	if (
		( ent2_expected_prev[14] !== 1'bx ) && ( ent2_prev[14] !== ent2_expected_prev[14] )
		&& ((ent2_expected_prev[14] !== last_ent2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[14] = ent2_expected_prev[14];
	end
	if (
		( ent2_expected_prev[15] !== 1'bx ) && ( ent2_prev[15] !== ent2_expected_prev[15] )
		&& ((ent2_expected_prev[15] !== last_ent2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[15] = ent2_expected_prev[15];
	end
	if (
		( ent2_expected_prev[16] !== 1'bx ) && ( ent2_prev[16] !== ent2_expected_prev[16] )
		&& ((ent2_expected_prev[16] !== last_ent2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[16] = ent2_expected_prev[16];
	end
	if (
		( ent2_expected_prev[17] !== 1'bx ) && ( ent2_prev[17] !== ent2_expected_prev[17] )
		&& ((ent2_expected_prev[17] !== last_ent2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[17] = ent2_expected_prev[17];
	end
	if (
		( ent2_expected_prev[18] !== 1'bx ) && ( ent2_prev[18] !== ent2_expected_prev[18] )
		&& ((ent2_expected_prev[18] !== last_ent2_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[18] = ent2_expected_prev[18];
	end
	if (
		( ent2_expected_prev[19] !== 1'bx ) && ( ent2_prev[19] !== ent2_expected_prev[19] )
		&& ((ent2_expected_prev[19] !== last_ent2_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[19] = ent2_expected_prev[19];
	end
	if (
		( ent2_expected_prev[20] !== 1'bx ) && ( ent2_prev[20] !== ent2_expected_prev[20] )
		&& ((ent2_expected_prev[20] !== last_ent2_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[20] = ent2_expected_prev[20];
	end
	if (
		( ent2_expected_prev[21] !== 1'bx ) && ( ent2_prev[21] !== ent2_expected_prev[21] )
		&& ((ent2_expected_prev[21] !== last_ent2_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[21] = ent2_expected_prev[21];
	end
	if (
		( ent2_expected_prev[22] !== 1'bx ) && ( ent2_prev[22] !== ent2_expected_prev[22] )
		&& ((ent2_expected_prev[22] !== last_ent2_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[22] = ent2_expected_prev[22];
	end
	if (
		( ent2_expected_prev[23] !== 1'bx ) && ( ent2_prev[23] !== ent2_expected_prev[23] )
		&& ((ent2_expected_prev[23] !== last_ent2_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[23] = ent2_expected_prev[23];
	end
	if (
		( ent2_expected_prev[24] !== 1'bx ) && ( ent2_prev[24] !== ent2_expected_prev[24] )
		&& ((ent2_expected_prev[24] !== last_ent2_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[24] = ent2_expected_prev[24];
	end
	if (
		( ent2_expected_prev[25] !== 1'bx ) && ( ent2_prev[25] !== ent2_expected_prev[25] )
		&& ((ent2_expected_prev[25] !== last_ent2_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[25] = ent2_expected_prev[25];
	end
	if (
		( ent2_expected_prev[26] !== 1'bx ) && ( ent2_prev[26] !== ent2_expected_prev[26] )
		&& ((ent2_expected_prev[26] !== last_ent2_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[26] = ent2_expected_prev[26];
	end
	if (
		( ent2_expected_prev[27] !== 1'bx ) && ( ent2_prev[27] !== ent2_expected_prev[27] )
		&& ((ent2_expected_prev[27] !== last_ent2_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[27] = ent2_expected_prev[27];
	end
	if (
		( ent2_expected_prev[28] !== 1'bx ) && ( ent2_prev[28] !== ent2_expected_prev[28] )
		&& ((ent2_expected_prev[28] !== last_ent2_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[28] = ent2_expected_prev[28];
	end
	if (
		( ent2_expected_prev[29] !== 1'bx ) && ( ent2_prev[29] !== ent2_expected_prev[29] )
		&& ((ent2_expected_prev[29] !== last_ent2_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[29] = ent2_expected_prev[29];
	end
	if (
		( ent2_expected_prev[30] !== 1'bx ) && ( ent2_prev[30] !== ent2_expected_prev[30] )
		&& ((ent2_expected_prev[30] !== last_ent2_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[30] = ent2_expected_prev[30];
	end
	if (
		( ent2_expected_prev[31] !== 1'bx ) && ( ent2_prev[31] !== ent2_expected_prev[31] )
		&& ((ent2_expected_prev[31] !== last_ent2_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ent2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ent2_expected_prev);
		$display ("     Real value = %b", ent2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ent2_exp[31] = ent2_expected_prev[31];
	end
	if (
		( instrucao_expected_prev[0] !== 1'bx ) && ( instrucao_prev[0] !== instrucao_expected_prev[0] )
		&& ((instrucao_expected_prev[0] !== last_instrucao_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[0] = instrucao_expected_prev[0];
	end
	if (
		( instrucao_expected_prev[1] !== 1'bx ) && ( instrucao_prev[1] !== instrucao_expected_prev[1] )
		&& ((instrucao_expected_prev[1] !== last_instrucao_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[1] = instrucao_expected_prev[1];
	end
	if (
		( instrucao_expected_prev[2] !== 1'bx ) && ( instrucao_prev[2] !== instrucao_expected_prev[2] )
		&& ((instrucao_expected_prev[2] !== last_instrucao_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[2] = instrucao_expected_prev[2];
	end
	if (
		( instrucao_expected_prev[3] !== 1'bx ) && ( instrucao_prev[3] !== instrucao_expected_prev[3] )
		&& ((instrucao_expected_prev[3] !== last_instrucao_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[3] = instrucao_expected_prev[3];
	end
	if (
		( instrucao_expected_prev[4] !== 1'bx ) && ( instrucao_prev[4] !== instrucao_expected_prev[4] )
		&& ((instrucao_expected_prev[4] !== last_instrucao_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[4] = instrucao_expected_prev[4];
	end
	if (
		( instrucao_expected_prev[5] !== 1'bx ) && ( instrucao_prev[5] !== instrucao_expected_prev[5] )
		&& ((instrucao_expected_prev[5] !== last_instrucao_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[5] = instrucao_expected_prev[5];
	end
	if (
		( instrucao_expected_prev[6] !== 1'bx ) && ( instrucao_prev[6] !== instrucao_expected_prev[6] )
		&& ((instrucao_expected_prev[6] !== last_instrucao_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[6] = instrucao_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[7] !== 1'bx ) && ( instrucao_prev[7] !== instrucao_expected_prev[7] )
		&& ((instrucao_expected_prev[7] !== last_instrucao_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[7] = instrucao_expected_prev[7];
	end
	if (
		( instrucao_expected_prev[8] !== 1'bx ) && ( instrucao_prev[8] !== instrucao_expected_prev[8] )
		&& ((instrucao_expected_prev[8] !== last_instrucao_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[8] = instrucao_expected_prev[8];
	end
	if (
		( instrucao_expected_prev[9] !== 1'bx ) && ( instrucao_prev[9] !== instrucao_expected_prev[9] )
		&& ((instrucao_expected_prev[9] !== last_instrucao_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[9] = instrucao_expected_prev[9];
	end
	if (
		( instrucao_expected_prev[10] !== 1'bx ) && ( instrucao_prev[10] !== instrucao_expected_prev[10] )
		&& ((instrucao_expected_prev[10] !== last_instrucao_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[10] = instrucao_expected_prev[10];
	end
	if (
		( instrucao_expected_prev[11] !== 1'bx ) && ( instrucao_prev[11] !== instrucao_expected_prev[11] )
		&& ((instrucao_expected_prev[11] !== last_instrucao_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[11] = instrucao_expected_prev[11];
	end
	if (
		( instrucao_expected_prev[12] !== 1'bx ) && ( instrucao_prev[12] !== instrucao_expected_prev[12] )
		&& ((instrucao_expected_prev[12] !== last_instrucao_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[12] = instrucao_expected_prev[12];
	end
	if (
		( instrucao_expected_prev[13] !== 1'bx ) && ( instrucao_prev[13] !== instrucao_expected_prev[13] )
		&& ((instrucao_expected_prev[13] !== last_instrucao_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[13] = instrucao_expected_prev[13];
	end
	if (
		( instrucao_expected_prev[14] !== 1'bx ) && ( instrucao_prev[14] !== instrucao_expected_prev[14] )
		&& ((instrucao_expected_prev[14] !== last_instrucao_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[14] = instrucao_expected_prev[14];
	end
	if (
		( instrucao_expected_prev[15] !== 1'bx ) && ( instrucao_prev[15] !== instrucao_expected_prev[15] )
		&& ((instrucao_expected_prev[15] !== last_instrucao_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[15] = instrucao_expected_prev[15];
	end
	if (
		( instrucao_expected_prev[16] !== 1'bx ) && ( instrucao_prev[16] !== instrucao_expected_prev[16] )
		&& ((instrucao_expected_prev[16] !== last_instrucao_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[16] = instrucao_expected_prev[16];
	end
	if (
		( instrucao_expected_prev[17] !== 1'bx ) && ( instrucao_prev[17] !== instrucao_expected_prev[17] )
		&& ((instrucao_expected_prev[17] !== last_instrucao_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[17] = instrucao_expected_prev[17];
	end
	if (
		( instrucao_expected_prev[18] !== 1'bx ) && ( instrucao_prev[18] !== instrucao_expected_prev[18] )
		&& ((instrucao_expected_prev[18] !== last_instrucao_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[18] = instrucao_expected_prev[18];
	end
	if (
		( instrucao_expected_prev[19] !== 1'bx ) && ( instrucao_prev[19] !== instrucao_expected_prev[19] )
		&& ((instrucao_expected_prev[19] !== last_instrucao_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[19] = instrucao_expected_prev[19];
	end
	if (
		( instrucao_expected_prev[20] !== 1'bx ) && ( instrucao_prev[20] !== instrucao_expected_prev[20] )
		&& ((instrucao_expected_prev[20] !== last_instrucao_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[20] = instrucao_expected_prev[20];
	end
	if (
		( instrucao_expected_prev[21] !== 1'bx ) && ( instrucao_prev[21] !== instrucao_expected_prev[21] )
		&& ((instrucao_expected_prev[21] !== last_instrucao_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[21] = instrucao_expected_prev[21];
	end
	if (
		( instrucao_expected_prev[22] !== 1'bx ) && ( instrucao_prev[22] !== instrucao_expected_prev[22] )
		&& ((instrucao_expected_prev[22] !== last_instrucao_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[22] = instrucao_expected_prev[22];
	end
	if (
		( instrucao_expected_prev[23] !== 1'bx ) && ( instrucao_prev[23] !== instrucao_expected_prev[23] )
		&& ((instrucao_expected_prev[23] !== last_instrucao_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[23] = instrucao_expected_prev[23];
	end
	if (
		( instrucao_expected_prev[24] !== 1'bx ) && ( instrucao_prev[24] !== instrucao_expected_prev[24] )
		&& ((instrucao_expected_prev[24] !== last_instrucao_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[24] = instrucao_expected_prev[24];
	end
	if (
		( instrucao_expected_prev[25] !== 1'bx ) && ( instrucao_prev[25] !== instrucao_expected_prev[25] )
		&& ((instrucao_expected_prev[25] !== last_instrucao_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[25] = instrucao_expected_prev[25];
	end
	if (
		( instrucao_expected_prev[26] !== 1'bx ) && ( instrucao_prev[26] !== instrucao_expected_prev[26] )
		&& ((instrucao_expected_prev[26] !== last_instrucao_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[26] = instrucao_expected_prev[26];
	end
	if (
		( instrucao_expected_prev[27] !== 1'bx ) && ( instrucao_prev[27] !== instrucao_expected_prev[27] )
		&& ((instrucao_expected_prev[27] !== last_instrucao_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[27] = instrucao_expected_prev[27];
	end
	if (
		( instrucao_expected_prev[28] !== 1'bx ) && ( instrucao_prev[28] !== instrucao_expected_prev[28] )
		&& ((instrucao_expected_prev[28] !== last_instrucao_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[28] = instrucao_expected_prev[28];
	end
	if (
		( instrucao_expected_prev[29] !== 1'bx ) && ( instrucao_prev[29] !== instrucao_expected_prev[29] )
		&& ((instrucao_expected_prev[29] !== last_instrucao_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[29] = instrucao_expected_prev[29];
	end
	if (
		( instrucao_expected_prev[30] !== 1'bx ) && ( instrucao_prev[30] !== instrucao_expected_prev[30] )
		&& ((instrucao_expected_prev[30] !== last_instrucao_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[30] = instrucao_expected_prev[30];
	end
	if (
		( instrucao_expected_prev[31] !== 1'bx ) && ( instrucao_prev[31] !== instrucao_expected_prev[31] )
		&& ((instrucao_expected_prev[31] !== last_instrucao_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[31] = instrucao_expected_prev[31];
	end
	if (
		( n_intrucao_expected_prev[0] !== 1'bx ) && ( n_intrucao_prev[0] !== n_intrucao_expected_prev[0] )
		&& ((n_intrucao_expected_prev[0] !== last_n_intrucao_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[0] = n_intrucao_expected_prev[0];
	end
	if (
		( n_intrucao_expected_prev[1] !== 1'bx ) && ( n_intrucao_prev[1] !== n_intrucao_expected_prev[1] )
		&& ((n_intrucao_expected_prev[1] !== last_n_intrucao_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[1] = n_intrucao_expected_prev[1];
	end
	if (
		( n_intrucao_expected_prev[2] !== 1'bx ) && ( n_intrucao_prev[2] !== n_intrucao_expected_prev[2] )
		&& ((n_intrucao_expected_prev[2] !== last_n_intrucao_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[2] = n_intrucao_expected_prev[2];
	end
	if (
		( n_intrucao_expected_prev[3] !== 1'bx ) && ( n_intrucao_prev[3] !== n_intrucao_expected_prev[3] )
		&& ((n_intrucao_expected_prev[3] !== last_n_intrucao_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[3] = n_intrucao_expected_prev[3];
	end
	if (
		( n_intrucao_expected_prev[4] !== 1'bx ) && ( n_intrucao_prev[4] !== n_intrucao_expected_prev[4] )
		&& ((n_intrucao_expected_prev[4] !== last_n_intrucao_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[4] = n_intrucao_expected_prev[4];
	end
	if (
		( n_intrucao_expected_prev[5] !== 1'bx ) && ( n_intrucao_prev[5] !== n_intrucao_expected_prev[5] )
		&& ((n_intrucao_expected_prev[5] !== last_n_intrucao_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[5] = n_intrucao_expected_prev[5];
	end
	if (
		( n_intrucao_expected_prev[6] !== 1'bx ) && ( n_intrucao_prev[6] !== n_intrucao_expected_prev[6] )
		&& ((n_intrucao_expected_prev[6] !== last_n_intrucao_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[6] = n_intrucao_expected_prev[6];
	end
	if (
		( n_intrucao_expected_prev[7] !== 1'bx ) && ( n_intrucao_prev[7] !== n_intrucao_expected_prev[7] )
		&& ((n_intrucao_expected_prev[7] !== last_n_intrucao_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[7] = n_intrucao_expected_prev[7];
	end
	if (
		( n_intrucao_expected_prev[8] !== 1'bx ) && ( n_intrucao_prev[8] !== n_intrucao_expected_prev[8] )
		&& ((n_intrucao_expected_prev[8] !== last_n_intrucao_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[8] = n_intrucao_expected_prev[8];
	end
	if (
		( n_intrucao_expected_prev[9] !== 1'bx ) && ( n_intrucao_prev[9] !== n_intrucao_expected_prev[9] )
		&& ((n_intrucao_expected_prev[9] !== last_n_intrucao_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[9] = n_intrucao_expected_prev[9];
	end
	if (
		( n_intrucao_expected_prev[10] !== 1'bx ) && ( n_intrucao_prev[10] !== n_intrucao_expected_prev[10] )
		&& ((n_intrucao_expected_prev[10] !== last_n_intrucao_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[10] = n_intrucao_expected_prev[10];
	end
	if (
		( n_intrucao_expected_prev[11] !== 1'bx ) && ( n_intrucao_prev[11] !== n_intrucao_expected_prev[11] )
		&& ((n_intrucao_expected_prev[11] !== last_n_intrucao_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_intrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_intrucao_expected_prev);
		$display ("     Real value = %b", n_intrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n_intrucao_exp[11] = n_intrucao_expected_prev[11];
	end
	if (
		( Opalu_expected_prev[0] !== 1'bx ) && ( Opalu_prev[0] !== Opalu_expected_prev[0] )
		&& ((Opalu_expected_prev[0] !== last_Opalu_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opalu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opalu_expected_prev);
		$display ("     Real value = %b", Opalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Opalu_exp[0] = Opalu_expected_prev[0];
	end
	if (
		( Opalu_expected_prev[1] !== 1'bx ) && ( Opalu_prev[1] !== Opalu_expected_prev[1] )
		&& ((Opalu_expected_prev[1] !== last_Opalu_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opalu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opalu_expected_prev);
		$display ("     Real value = %b", Opalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Opalu_exp[1] = Opalu_expected_prev[1];
	end
	if (
		( Opalu_expected_prev[2] !== 1'bx ) && ( Opalu_prev[2] !== Opalu_expected_prev[2] )
		&& ((Opalu_expected_prev[2] !== last_Opalu_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opalu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opalu_expected_prev);
		$display ("     Real value = %b", Opalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Opalu_exp[2] = Opalu_expected_prev[2];
	end
	if (
		( Opalu_expected_prev[3] !== 1'bx ) && ( Opalu_prev[3] !== Opalu_expected_prev[3] )
		&& ((Opalu_expected_prev[3] !== last_Opalu_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opalu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opalu_expected_prev);
		$display ("     Real value = %b", Opalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Opalu_exp[3] = Opalu_expected_prev[3];
	end
	if (
		( Opalu_expected_prev[4] !== 1'bx ) && ( Opalu_prev[4] !== Opalu_expected_prev[4] )
		&& ((Opalu_expected_prev[4] !== last_Opalu_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Opalu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Opalu_expected_prev);
		$display ("     Real value = %b", Opalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Opalu_exp[4] = Opalu_expected_prev[4];
	end
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( Reg_1_expected_prev[0] !== 1'bx ) && ( Reg_1_prev[0] !== Reg_1_expected_prev[0] )
		&& ((Reg_1_expected_prev[0] !== last_Reg_1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[0] = Reg_1_expected_prev[0];
	end
	if (
		( Reg_1_expected_prev[1] !== 1'bx ) && ( Reg_1_prev[1] !== Reg_1_expected_prev[1] )
		&& ((Reg_1_expected_prev[1] !== last_Reg_1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[1] = Reg_1_expected_prev[1];
	end
	if (
		( Reg_1_expected_prev[2] !== 1'bx ) && ( Reg_1_prev[2] !== Reg_1_expected_prev[2] )
		&& ((Reg_1_expected_prev[2] !== last_Reg_1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[2] = Reg_1_expected_prev[2];
	end
	if (
		( Reg_1_expected_prev[3] !== 1'bx ) && ( Reg_1_prev[3] !== Reg_1_expected_prev[3] )
		&& ((Reg_1_expected_prev[3] !== last_Reg_1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[3] = Reg_1_expected_prev[3];
	end
	if (
		( Reg_1_expected_prev[4] !== 1'bx ) && ( Reg_1_prev[4] !== Reg_1_expected_prev[4] )
		&& ((Reg_1_expected_prev[4] !== last_Reg_1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[4] = Reg_1_expected_prev[4];
	end
	if (
		( Reg_1_expected_prev[5] !== 1'bx ) && ( Reg_1_prev[5] !== Reg_1_expected_prev[5] )
		&& ((Reg_1_expected_prev[5] !== last_Reg_1_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[5] = Reg_1_expected_prev[5];
	end
	if (
		( Reg_1_expected_prev[6] !== 1'bx ) && ( Reg_1_prev[6] !== Reg_1_expected_prev[6] )
		&& ((Reg_1_expected_prev[6] !== last_Reg_1_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[6] = Reg_1_expected_prev[6];
	end
	if (
		( Reg_1_expected_prev[7] !== 1'bx ) && ( Reg_1_prev[7] !== Reg_1_expected_prev[7] )
		&& ((Reg_1_expected_prev[7] !== last_Reg_1_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[7] = Reg_1_expected_prev[7];
	end
	if (
		( Reg_1_expected_prev[8] !== 1'bx ) && ( Reg_1_prev[8] !== Reg_1_expected_prev[8] )
		&& ((Reg_1_expected_prev[8] !== last_Reg_1_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[8] = Reg_1_expected_prev[8];
	end
	if (
		( Reg_1_expected_prev[9] !== 1'bx ) && ( Reg_1_prev[9] !== Reg_1_expected_prev[9] )
		&& ((Reg_1_expected_prev[9] !== last_Reg_1_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[9] = Reg_1_expected_prev[9];
	end
	if (
		( Reg_1_expected_prev[10] !== 1'bx ) && ( Reg_1_prev[10] !== Reg_1_expected_prev[10] )
		&& ((Reg_1_expected_prev[10] !== last_Reg_1_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[10] = Reg_1_expected_prev[10];
	end
	if (
		( Reg_1_expected_prev[11] !== 1'bx ) && ( Reg_1_prev[11] !== Reg_1_expected_prev[11] )
		&& ((Reg_1_expected_prev[11] !== last_Reg_1_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[11] = Reg_1_expected_prev[11];
	end
	if (
		( Reg_1_expected_prev[12] !== 1'bx ) && ( Reg_1_prev[12] !== Reg_1_expected_prev[12] )
		&& ((Reg_1_expected_prev[12] !== last_Reg_1_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[12] = Reg_1_expected_prev[12];
	end
	if (
		( Reg_1_expected_prev[13] !== 1'bx ) && ( Reg_1_prev[13] !== Reg_1_expected_prev[13] )
		&& ((Reg_1_expected_prev[13] !== last_Reg_1_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[13] = Reg_1_expected_prev[13];
	end
	if (
		( Reg_1_expected_prev[14] !== 1'bx ) && ( Reg_1_prev[14] !== Reg_1_expected_prev[14] )
		&& ((Reg_1_expected_prev[14] !== last_Reg_1_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[14] = Reg_1_expected_prev[14];
	end
	if (
		( Reg_1_expected_prev[15] !== 1'bx ) && ( Reg_1_prev[15] !== Reg_1_expected_prev[15] )
		&& ((Reg_1_expected_prev[15] !== last_Reg_1_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[15] = Reg_1_expected_prev[15];
	end
	if (
		( Reg_1_expected_prev[16] !== 1'bx ) && ( Reg_1_prev[16] !== Reg_1_expected_prev[16] )
		&& ((Reg_1_expected_prev[16] !== last_Reg_1_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[16] = Reg_1_expected_prev[16];
	end
	if (
		( Reg_1_expected_prev[17] !== 1'bx ) && ( Reg_1_prev[17] !== Reg_1_expected_prev[17] )
		&& ((Reg_1_expected_prev[17] !== last_Reg_1_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[17] = Reg_1_expected_prev[17];
	end
	if (
		( Reg_1_expected_prev[18] !== 1'bx ) && ( Reg_1_prev[18] !== Reg_1_expected_prev[18] )
		&& ((Reg_1_expected_prev[18] !== last_Reg_1_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[18] = Reg_1_expected_prev[18];
	end
	if (
		( Reg_1_expected_prev[19] !== 1'bx ) && ( Reg_1_prev[19] !== Reg_1_expected_prev[19] )
		&& ((Reg_1_expected_prev[19] !== last_Reg_1_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[19] = Reg_1_expected_prev[19];
	end
	if (
		( Reg_1_expected_prev[20] !== 1'bx ) && ( Reg_1_prev[20] !== Reg_1_expected_prev[20] )
		&& ((Reg_1_expected_prev[20] !== last_Reg_1_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[20] = Reg_1_expected_prev[20];
	end
	if (
		( Reg_1_expected_prev[21] !== 1'bx ) && ( Reg_1_prev[21] !== Reg_1_expected_prev[21] )
		&& ((Reg_1_expected_prev[21] !== last_Reg_1_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[21] = Reg_1_expected_prev[21];
	end
	if (
		( Reg_1_expected_prev[22] !== 1'bx ) && ( Reg_1_prev[22] !== Reg_1_expected_prev[22] )
		&& ((Reg_1_expected_prev[22] !== last_Reg_1_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[22] = Reg_1_expected_prev[22];
	end
	if (
		( Reg_1_expected_prev[23] !== 1'bx ) && ( Reg_1_prev[23] !== Reg_1_expected_prev[23] )
		&& ((Reg_1_expected_prev[23] !== last_Reg_1_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[23] = Reg_1_expected_prev[23];
	end
	if (
		( Reg_1_expected_prev[24] !== 1'bx ) && ( Reg_1_prev[24] !== Reg_1_expected_prev[24] )
		&& ((Reg_1_expected_prev[24] !== last_Reg_1_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[24] = Reg_1_expected_prev[24];
	end
	if (
		( Reg_1_expected_prev[25] !== 1'bx ) && ( Reg_1_prev[25] !== Reg_1_expected_prev[25] )
		&& ((Reg_1_expected_prev[25] !== last_Reg_1_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[25] = Reg_1_expected_prev[25];
	end
	if (
		( Reg_1_expected_prev[26] !== 1'bx ) && ( Reg_1_prev[26] !== Reg_1_expected_prev[26] )
		&& ((Reg_1_expected_prev[26] !== last_Reg_1_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[26] = Reg_1_expected_prev[26];
	end
	if (
		( Reg_1_expected_prev[27] !== 1'bx ) && ( Reg_1_prev[27] !== Reg_1_expected_prev[27] )
		&& ((Reg_1_expected_prev[27] !== last_Reg_1_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[27] = Reg_1_expected_prev[27];
	end
	if (
		( Reg_1_expected_prev[28] !== 1'bx ) && ( Reg_1_prev[28] !== Reg_1_expected_prev[28] )
		&& ((Reg_1_expected_prev[28] !== last_Reg_1_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[28] = Reg_1_expected_prev[28];
	end
	if (
		( Reg_1_expected_prev[29] !== 1'bx ) && ( Reg_1_prev[29] !== Reg_1_expected_prev[29] )
		&& ((Reg_1_expected_prev[29] !== last_Reg_1_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[29] = Reg_1_expected_prev[29];
	end
	if (
		( Reg_1_expected_prev[30] !== 1'bx ) && ( Reg_1_prev[30] !== Reg_1_expected_prev[30] )
		&& ((Reg_1_expected_prev[30] !== last_Reg_1_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[30] = Reg_1_expected_prev[30];
	end
	if (
		( Reg_1_expected_prev[31] !== 1'bx ) && ( Reg_1_prev[31] !== Reg_1_expected_prev[31] )
		&& ((Reg_1_expected_prev[31] !== last_Reg_1_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_1_expected_prev);
		$display ("     Real value = %b", Reg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Reg_1_exp[31] = Reg_1_expected_prev[31];
	end
	if (
		( Reg_2_expected_prev[0] !== 1'bx ) && ( Reg_2_prev[0] !== Reg_2_expected_prev[0] )
		&& ((Reg_2_expected_prev[0] !== last_Reg_2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[0] = Reg_2_expected_prev[0];
	end
	if (
		( Reg_2_expected_prev[1] !== 1'bx ) && ( Reg_2_prev[1] !== Reg_2_expected_prev[1] )
		&& ((Reg_2_expected_prev[1] !== last_Reg_2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[1] = Reg_2_expected_prev[1];
	end
	if (
		( Reg_2_expected_prev[2] !== 1'bx ) && ( Reg_2_prev[2] !== Reg_2_expected_prev[2] )
		&& ((Reg_2_expected_prev[2] !== last_Reg_2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[2] = Reg_2_expected_prev[2];
	end
	if (
		( Reg_2_expected_prev[3] !== 1'bx ) && ( Reg_2_prev[3] !== Reg_2_expected_prev[3] )
		&& ((Reg_2_expected_prev[3] !== last_Reg_2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[3] = Reg_2_expected_prev[3];
	end
	if (
		( Reg_2_expected_prev[4] !== 1'bx ) && ( Reg_2_prev[4] !== Reg_2_expected_prev[4] )
		&& ((Reg_2_expected_prev[4] !== last_Reg_2_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[4] = Reg_2_expected_prev[4];
	end
	if (
		( Reg_2_expected_prev[5] !== 1'bx ) && ( Reg_2_prev[5] !== Reg_2_expected_prev[5] )
		&& ((Reg_2_expected_prev[5] !== last_Reg_2_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[5] = Reg_2_expected_prev[5];
	end
	if (
		( Reg_2_expected_prev[6] !== 1'bx ) && ( Reg_2_prev[6] !== Reg_2_expected_prev[6] )
		&& ((Reg_2_expected_prev[6] !== last_Reg_2_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[6] = Reg_2_expected_prev[6];
	end
	if (
		( Reg_2_expected_prev[7] !== 1'bx ) && ( Reg_2_prev[7] !== Reg_2_expected_prev[7] )
		&& ((Reg_2_expected_prev[7] !== last_Reg_2_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[7] = Reg_2_expected_prev[7];
	end
	if (
		( Reg_2_expected_prev[8] !== 1'bx ) && ( Reg_2_prev[8] !== Reg_2_expected_prev[8] )
		&& ((Reg_2_expected_prev[8] !== last_Reg_2_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[8] = Reg_2_expected_prev[8];
	end
	if (
		( Reg_2_expected_prev[9] !== 1'bx ) && ( Reg_2_prev[9] !== Reg_2_expected_prev[9] )
		&& ((Reg_2_expected_prev[9] !== last_Reg_2_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[9] = Reg_2_expected_prev[9];
	end
	if (
		( Reg_2_expected_prev[10] !== 1'bx ) && ( Reg_2_prev[10] !== Reg_2_expected_prev[10] )
		&& ((Reg_2_expected_prev[10] !== last_Reg_2_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[10] = Reg_2_expected_prev[10];
	end
	if (
		( Reg_2_expected_prev[11] !== 1'bx ) && ( Reg_2_prev[11] !== Reg_2_expected_prev[11] )
		&& ((Reg_2_expected_prev[11] !== last_Reg_2_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[11] = Reg_2_expected_prev[11];
	end
	if (
		( Reg_2_expected_prev[12] !== 1'bx ) && ( Reg_2_prev[12] !== Reg_2_expected_prev[12] )
		&& ((Reg_2_expected_prev[12] !== last_Reg_2_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[12] = Reg_2_expected_prev[12];
	end
	if (
		( Reg_2_expected_prev[13] !== 1'bx ) && ( Reg_2_prev[13] !== Reg_2_expected_prev[13] )
		&& ((Reg_2_expected_prev[13] !== last_Reg_2_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[13] = Reg_2_expected_prev[13];
	end
	if (
		( Reg_2_expected_prev[14] !== 1'bx ) && ( Reg_2_prev[14] !== Reg_2_expected_prev[14] )
		&& ((Reg_2_expected_prev[14] !== last_Reg_2_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[14] = Reg_2_expected_prev[14];
	end
	if (
		( Reg_2_expected_prev[15] !== 1'bx ) && ( Reg_2_prev[15] !== Reg_2_expected_prev[15] )
		&& ((Reg_2_expected_prev[15] !== last_Reg_2_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[15] = Reg_2_expected_prev[15];
	end
	if (
		( Reg_2_expected_prev[16] !== 1'bx ) && ( Reg_2_prev[16] !== Reg_2_expected_prev[16] )
		&& ((Reg_2_expected_prev[16] !== last_Reg_2_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[16] = Reg_2_expected_prev[16];
	end
	if (
		( Reg_2_expected_prev[17] !== 1'bx ) && ( Reg_2_prev[17] !== Reg_2_expected_prev[17] )
		&& ((Reg_2_expected_prev[17] !== last_Reg_2_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[17] = Reg_2_expected_prev[17];
	end
	if (
		( Reg_2_expected_prev[18] !== 1'bx ) && ( Reg_2_prev[18] !== Reg_2_expected_prev[18] )
		&& ((Reg_2_expected_prev[18] !== last_Reg_2_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[18] = Reg_2_expected_prev[18];
	end
	if (
		( Reg_2_expected_prev[19] !== 1'bx ) && ( Reg_2_prev[19] !== Reg_2_expected_prev[19] )
		&& ((Reg_2_expected_prev[19] !== last_Reg_2_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[19] = Reg_2_expected_prev[19];
	end
	if (
		( Reg_2_expected_prev[20] !== 1'bx ) && ( Reg_2_prev[20] !== Reg_2_expected_prev[20] )
		&& ((Reg_2_expected_prev[20] !== last_Reg_2_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[20] = Reg_2_expected_prev[20];
	end
	if (
		( Reg_2_expected_prev[21] !== 1'bx ) && ( Reg_2_prev[21] !== Reg_2_expected_prev[21] )
		&& ((Reg_2_expected_prev[21] !== last_Reg_2_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[21] = Reg_2_expected_prev[21];
	end
	if (
		( Reg_2_expected_prev[22] !== 1'bx ) && ( Reg_2_prev[22] !== Reg_2_expected_prev[22] )
		&& ((Reg_2_expected_prev[22] !== last_Reg_2_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[22] = Reg_2_expected_prev[22];
	end
	if (
		( Reg_2_expected_prev[23] !== 1'bx ) && ( Reg_2_prev[23] !== Reg_2_expected_prev[23] )
		&& ((Reg_2_expected_prev[23] !== last_Reg_2_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[23] = Reg_2_expected_prev[23];
	end
	if (
		( Reg_2_expected_prev[24] !== 1'bx ) && ( Reg_2_prev[24] !== Reg_2_expected_prev[24] )
		&& ((Reg_2_expected_prev[24] !== last_Reg_2_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[24] = Reg_2_expected_prev[24];
	end
	if (
		( Reg_2_expected_prev[25] !== 1'bx ) && ( Reg_2_prev[25] !== Reg_2_expected_prev[25] )
		&& ((Reg_2_expected_prev[25] !== last_Reg_2_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[25] = Reg_2_expected_prev[25];
	end
	if (
		( Reg_2_expected_prev[26] !== 1'bx ) && ( Reg_2_prev[26] !== Reg_2_expected_prev[26] )
		&& ((Reg_2_expected_prev[26] !== last_Reg_2_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[26] = Reg_2_expected_prev[26];
	end
	if (
		( Reg_2_expected_prev[27] !== 1'bx ) && ( Reg_2_prev[27] !== Reg_2_expected_prev[27] )
		&& ((Reg_2_expected_prev[27] !== last_Reg_2_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[27] = Reg_2_expected_prev[27];
	end
	if (
		( Reg_2_expected_prev[28] !== 1'bx ) && ( Reg_2_prev[28] !== Reg_2_expected_prev[28] )
		&& ((Reg_2_expected_prev[28] !== last_Reg_2_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[28] = Reg_2_expected_prev[28];
	end
	if (
		( Reg_2_expected_prev[29] !== 1'bx ) && ( Reg_2_prev[29] !== Reg_2_expected_prev[29] )
		&& ((Reg_2_expected_prev[29] !== last_Reg_2_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[29] = Reg_2_expected_prev[29];
	end
	if (
		( Reg_2_expected_prev[30] !== 1'bx ) && ( Reg_2_prev[30] !== Reg_2_expected_prev[30] )
		&& ((Reg_2_expected_prev[30] !== last_Reg_2_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[30] = Reg_2_expected_prev[30];
	end
	if (
		( Reg_2_expected_prev[31] !== 1'bx ) && ( Reg_2_prev[31] !== Reg_2_expected_prev[31] )
		&& ((Reg_2_expected_prev[31] !== last_Reg_2_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_expected_prev);
		$display ("     Real value = %b", Reg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Reg_2_exp[31] = Reg_2_expected_prev[31];
	end
	if (
		( Result_expected_prev[0] !== 1'bx ) && ( Result_prev[0] !== Result_expected_prev[0] )
		&& ((Result_expected_prev[0] !== last_Result_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[0] = Result_expected_prev[0];
	end
	if (
		( Result_expected_prev[1] !== 1'bx ) && ( Result_prev[1] !== Result_expected_prev[1] )
		&& ((Result_expected_prev[1] !== last_Result_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[1] = Result_expected_prev[1];
	end
	if (
		( Result_expected_prev[2] !== 1'bx ) && ( Result_prev[2] !== Result_expected_prev[2] )
		&& ((Result_expected_prev[2] !== last_Result_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[2] = Result_expected_prev[2];
	end
	if (
		( Result_expected_prev[3] !== 1'bx ) && ( Result_prev[3] !== Result_expected_prev[3] )
		&& ((Result_expected_prev[3] !== last_Result_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[3] = Result_expected_prev[3];
	end
	if (
		( Result_expected_prev[4] !== 1'bx ) && ( Result_prev[4] !== Result_expected_prev[4] )
		&& ((Result_expected_prev[4] !== last_Result_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[4] = Result_expected_prev[4];
	end
	if (
		( Result_expected_prev[5] !== 1'bx ) && ( Result_prev[5] !== Result_expected_prev[5] )
		&& ((Result_expected_prev[5] !== last_Result_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[5] = Result_expected_prev[5];
	end
	if (
		( Result_expected_prev[6] !== 1'bx ) && ( Result_prev[6] !== Result_expected_prev[6] )
		&& ((Result_expected_prev[6] !== last_Result_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[6] = Result_expected_prev[6];
	end
	if (
		( Result_expected_prev[7] !== 1'bx ) && ( Result_prev[7] !== Result_expected_prev[7] )
		&& ((Result_expected_prev[7] !== last_Result_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[7] = Result_expected_prev[7];
	end
	if (
		( Result_expected_prev[8] !== 1'bx ) && ( Result_prev[8] !== Result_expected_prev[8] )
		&& ((Result_expected_prev[8] !== last_Result_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[8] = Result_expected_prev[8];
	end
	if (
		( Result_expected_prev[9] !== 1'bx ) && ( Result_prev[9] !== Result_expected_prev[9] )
		&& ((Result_expected_prev[9] !== last_Result_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[9] = Result_expected_prev[9];
	end
	if (
		( Result_expected_prev[10] !== 1'bx ) && ( Result_prev[10] !== Result_expected_prev[10] )
		&& ((Result_expected_prev[10] !== last_Result_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[10] = Result_expected_prev[10];
	end
	if (
		( Result_expected_prev[11] !== 1'bx ) && ( Result_prev[11] !== Result_expected_prev[11] )
		&& ((Result_expected_prev[11] !== last_Result_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[11] = Result_expected_prev[11];
	end
	if (
		( Result_expected_prev[12] !== 1'bx ) && ( Result_prev[12] !== Result_expected_prev[12] )
		&& ((Result_expected_prev[12] !== last_Result_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[12] = Result_expected_prev[12];
	end
	if (
		( Result_expected_prev[13] !== 1'bx ) && ( Result_prev[13] !== Result_expected_prev[13] )
		&& ((Result_expected_prev[13] !== last_Result_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[13] = Result_expected_prev[13];
	end
	if (
		( Result_expected_prev[14] !== 1'bx ) && ( Result_prev[14] !== Result_expected_prev[14] )
		&& ((Result_expected_prev[14] !== last_Result_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[14] = Result_expected_prev[14];
	end
	if (
		( Result_expected_prev[15] !== 1'bx ) && ( Result_prev[15] !== Result_expected_prev[15] )
		&& ((Result_expected_prev[15] !== last_Result_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[15] = Result_expected_prev[15];
	end
	if (
		( Result_expected_prev[16] !== 1'bx ) && ( Result_prev[16] !== Result_expected_prev[16] )
		&& ((Result_expected_prev[16] !== last_Result_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[16] = Result_expected_prev[16];
	end
	if (
		( Result_expected_prev[17] !== 1'bx ) && ( Result_prev[17] !== Result_expected_prev[17] )
		&& ((Result_expected_prev[17] !== last_Result_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[17] = Result_expected_prev[17];
	end
	if (
		( Result_expected_prev[18] !== 1'bx ) && ( Result_prev[18] !== Result_expected_prev[18] )
		&& ((Result_expected_prev[18] !== last_Result_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[18] = Result_expected_prev[18];
	end
	if (
		( Result_expected_prev[19] !== 1'bx ) && ( Result_prev[19] !== Result_expected_prev[19] )
		&& ((Result_expected_prev[19] !== last_Result_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[19] = Result_expected_prev[19];
	end
	if (
		( Result_expected_prev[20] !== 1'bx ) && ( Result_prev[20] !== Result_expected_prev[20] )
		&& ((Result_expected_prev[20] !== last_Result_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[20] = Result_expected_prev[20];
	end
	if (
		( Result_expected_prev[21] !== 1'bx ) && ( Result_prev[21] !== Result_expected_prev[21] )
		&& ((Result_expected_prev[21] !== last_Result_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[21] = Result_expected_prev[21];
	end
	if (
		( Result_expected_prev[22] !== 1'bx ) && ( Result_prev[22] !== Result_expected_prev[22] )
		&& ((Result_expected_prev[22] !== last_Result_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[22] = Result_expected_prev[22];
	end
	if (
		( Result_expected_prev[23] !== 1'bx ) && ( Result_prev[23] !== Result_expected_prev[23] )
		&& ((Result_expected_prev[23] !== last_Result_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[23] = Result_expected_prev[23];
	end
	if (
		( Result_expected_prev[24] !== 1'bx ) && ( Result_prev[24] !== Result_expected_prev[24] )
		&& ((Result_expected_prev[24] !== last_Result_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[24] = Result_expected_prev[24];
	end
	if (
		( Result_expected_prev[25] !== 1'bx ) && ( Result_prev[25] !== Result_expected_prev[25] )
		&& ((Result_expected_prev[25] !== last_Result_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[25] = Result_expected_prev[25];
	end
	if (
		( Result_expected_prev[26] !== 1'bx ) && ( Result_prev[26] !== Result_expected_prev[26] )
		&& ((Result_expected_prev[26] !== last_Result_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[26] = Result_expected_prev[26];
	end
	if (
		( Result_expected_prev[27] !== 1'bx ) && ( Result_prev[27] !== Result_expected_prev[27] )
		&& ((Result_expected_prev[27] !== last_Result_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[27] = Result_expected_prev[27];
	end
	if (
		( Result_expected_prev[28] !== 1'bx ) && ( Result_prev[28] !== Result_expected_prev[28] )
		&& ((Result_expected_prev[28] !== last_Result_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[28] = Result_expected_prev[28];
	end
	if (
		( Result_expected_prev[29] !== 1'bx ) && ( Result_prev[29] !== Result_expected_prev[29] )
		&& ((Result_expected_prev[29] !== last_Result_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[29] = Result_expected_prev[29];
	end
	if (
		( Result_expected_prev[30] !== 1'bx ) && ( Result_prev[30] !== Result_expected_prev[30] )
		&& ((Result_expected_prev[30] !== last_Result_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[30] = Result_expected_prev[30];
	end
	if (
		( Result_expected_prev[31] !== 1'bx ) && ( Result_prev[31] !== Result_expected_prev[31] )
		&& ((Result_expected_prev[31] !== last_Result_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Result_exp[31] = Result_expected_prev[31];
	end
	if (
		( VisualA_expected_prev[0] !== 1'bx ) && ( VisualA_prev[0] !== VisualA_expected_prev[0] )
		&& ((VisualA_expected_prev[0] !== last_VisualA_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[0] = VisualA_expected_prev[0];
	end
	if (
		( VisualA_expected_prev[1] !== 1'bx ) && ( VisualA_prev[1] !== VisualA_expected_prev[1] )
		&& ((VisualA_expected_prev[1] !== last_VisualA_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[1] = VisualA_expected_prev[1];
	end
	if (
		( VisualA_expected_prev[2] !== 1'bx ) && ( VisualA_prev[2] !== VisualA_expected_prev[2] )
		&& ((VisualA_expected_prev[2] !== last_VisualA_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[2] = VisualA_expected_prev[2];
	end
	if (
		( VisualA_expected_prev[3] !== 1'bx ) && ( VisualA_prev[3] !== VisualA_expected_prev[3] )
		&& ((VisualA_expected_prev[3] !== last_VisualA_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[3] = VisualA_expected_prev[3];
	end
	if (
		( VisualA_expected_prev[4] !== 1'bx ) && ( VisualA_prev[4] !== VisualA_expected_prev[4] )
		&& ((VisualA_expected_prev[4] !== last_VisualA_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[4] = VisualA_expected_prev[4];
	end
	if (
		( VisualA_expected_prev[5] !== 1'bx ) && ( VisualA_prev[5] !== VisualA_expected_prev[5] )
		&& ((VisualA_expected_prev[5] !== last_VisualA_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[5] = VisualA_expected_prev[5];
	end
	if (
		( VisualA_expected_prev[6] !== 1'bx ) && ( VisualA_prev[6] !== VisualA_expected_prev[6] )
		&& ((VisualA_expected_prev[6] !== last_VisualA_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[6] = VisualA_expected_prev[6];
	end
	if (
		( VisualA_expected_prev[7] !== 1'bx ) && ( VisualA_prev[7] !== VisualA_expected_prev[7] )
		&& ((VisualA_expected_prev[7] !== last_VisualA_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[7] = VisualA_expected_prev[7];
	end
	if (
		( VisualA_expected_prev[8] !== 1'bx ) && ( VisualA_prev[8] !== VisualA_expected_prev[8] )
		&& ((VisualA_expected_prev[8] !== last_VisualA_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[8] = VisualA_expected_prev[8];
	end
	if (
		( VisualA_expected_prev[9] !== 1'bx ) && ( VisualA_prev[9] !== VisualA_expected_prev[9] )
		&& ((VisualA_expected_prev[9] !== last_VisualA_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[9] = VisualA_expected_prev[9];
	end
	if (
		( VisualA_expected_prev[10] !== 1'bx ) && ( VisualA_prev[10] !== VisualA_expected_prev[10] )
		&& ((VisualA_expected_prev[10] !== last_VisualA_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[10] = VisualA_expected_prev[10];
	end
	if (
		( VisualA_expected_prev[11] !== 1'bx ) && ( VisualA_prev[11] !== VisualA_expected_prev[11] )
		&& ((VisualA_expected_prev[11] !== last_VisualA_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[11] = VisualA_expected_prev[11];
	end
	if (
		( VisualA_expected_prev[12] !== 1'bx ) && ( VisualA_prev[12] !== VisualA_expected_prev[12] )
		&& ((VisualA_expected_prev[12] !== last_VisualA_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[12] = VisualA_expected_prev[12];
	end
	if (
		( VisualA_expected_prev[13] !== 1'bx ) && ( VisualA_prev[13] !== VisualA_expected_prev[13] )
		&& ((VisualA_expected_prev[13] !== last_VisualA_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[13] = VisualA_expected_prev[13];
	end
	if (
		( VisualA_expected_prev[14] !== 1'bx ) && ( VisualA_prev[14] !== VisualA_expected_prev[14] )
		&& ((VisualA_expected_prev[14] !== last_VisualA_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[14] = VisualA_expected_prev[14];
	end
	if (
		( VisualA_expected_prev[15] !== 1'bx ) && ( VisualA_prev[15] !== VisualA_expected_prev[15] )
		&& ((VisualA_expected_prev[15] !== last_VisualA_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[15] = VisualA_expected_prev[15];
	end
	if (
		( VisualA_expected_prev[16] !== 1'bx ) && ( VisualA_prev[16] !== VisualA_expected_prev[16] )
		&& ((VisualA_expected_prev[16] !== last_VisualA_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[16] = VisualA_expected_prev[16];
	end
	if (
		( VisualA_expected_prev[17] !== 1'bx ) && ( VisualA_prev[17] !== VisualA_expected_prev[17] )
		&& ((VisualA_expected_prev[17] !== last_VisualA_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[17] = VisualA_expected_prev[17];
	end
	if (
		( VisualA_expected_prev[18] !== 1'bx ) && ( VisualA_prev[18] !== VisualA_expected_prev[18] )
		&& ((VisualA_expected_prev[18] !== last_VisualA_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[18] = VisualA_expected_prev[18];
	end
	if (
		( VisualA_expected_prev[19] !== 1'bx ) && ( VisualA_prev[19] !== VisualA_expected_prev[19] )
		&& ((VisualA_expected_prev[19] !== last_VisualA_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[19] = VisualA_expected_prev[19];
	end
	if (
		( VisualA_expected_prev[20] !== 1'bx ) && ( VisualA_prev[20] !== VisualA_expected_prev[20] )
		&& ((VisualA_expected_prev[20] !== last_VisualA_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[20] = VisualA_expected_prev[20];
	end
	if (
		( VisualA_expected_prev[21] !== 1'bx ) && ( VisualA_prev[21] !== VisualA_expected_prev[21] )
		&& ((VisualA_expected_prev[21] !== last_VisualA_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[21] = VisualA_expected_prev[21];
	end
	if (
		( VisualA_expected_prev[22] !== 1'bx ) && ( VisualA_prev[22] !== VisualA_expected_prev[22] )
		&& ((VisualA_expected_prev[22] !== last_VisualA_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[22] = VisualA_expected_prev[22];
	end
	if (
		( VisualA_expected_prev[23] !== 1'bx ) && ( VisualA_prev[23] !== VisualA_expected_prev[23] )
		&& ((VisualA_expected_prev[23] !== last_VisualA_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[23] = VisualA_expected_prev[23];
	end
	if (
		( VisualA_expected_prev[24] !== 1'bx ) && ( VisualA_prev[24] !== VisualA_expected_prev[24] )
		&& ((VisualA_expected_prev[24] !== last_VisualA_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[24] = VisualA_expected_prev[24];
	end
	if (
		( VisualA_expected_prev[25] !== 1'bx ) && ( VisualA_prev[25] !== VisualA_expected_prev[25] )
		&& ((VisualA_expected_prev[25] !== last_VisualA_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[25] = VisualA_expected_prev[25];
	end
	if (
		( VisualA_expected_prev[26] !== 1'bx ) && ( VisualA_prev[26] !== VisualA_expected_prev[26] )
		&& ((VisualA_expected_prev[26] !== last_VisualA_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[26] = VisualA_expected_prev[26];
	end
	if (
		( VisualA_expected_prev[27] !== 1'bx ) && ( VisualA_prev[27] !== VisualA_expected_prev[27] )
		&& ((VisualA_expected_prev[27] !== last_VisualA_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[27] = VisualA_expected_prev[27];
	end
	if (
		( VisualA_expected_prev[28] !== 1'bx ) && ( VisualA_prev[28] !== VisualA_expected_prev[28] )
		&& ((VisualA_expected_prev[28] !== last_VisualA_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[28] = VisualA_expected_prev[28];
	end
	if (
		( VisualA_expected_prev[29] !== 1'bx ) && ( VisualA_prev[29] !== VisualA_expected_prev[29] )
		&& ((VisualA_expected_prev[29] !== last_VisualA_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[29] = VisualA_expected_prev[29];
	end
	if (
		( VisualA_expected_prev[30] !== 1'bx ) && ( VisualA_prev[30] !== VisualA_expected_prev[30] )
		&& ((VisualA_expected_prev[30] !== last_VisualA_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[30] = VisualA_expected_prev[30];
	end
	if (
		( VisualA_expected_prev[31] !== 1'bx ) && ( VisualA_prev[31] !== VisualA_expected_prev[31] )
		&& ((VisualA_expected_prev[31] !== last_VisualA_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualA_expected_prev);
		$display ("     Real value = %b", VisualA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_VisualA_exp[31] = VisualA_expected_prev[31];
	end
	if (
		( VisualB_expected_prev[0] !== 1'bx ) && ( VisualB_prev[0] !== VisualB_expected_prev[0] )
		&& ((VisualB_expected_prev[0] !== last_VisualB_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[0] = VisualB_expected_prev[0];
	end
	if (
		( VisualB_expected_prev[1] !== 1'bx ) && ( VisualB_prev[1] !== VisualB_expected_prev[1] )
		&& ((VisualB_expected_prev[1] !== last_VisualB_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[1] = VisualB_expected_prev[1];
	end
	if (
		( VisualB_expected_prev[2] !== 1'bx ) && ( VisualB_prev[2] !== VisualB_expected_prev[2] )
		&& ((VisualB_expected_prev[2] !== last_VisualB_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[2] = VisualB_expected_prev[2];
	end
	if (
		( VisualB_expected_prev[3] !== 1'bx ) && ( VisualB_prev[3] !== VisualB_expected_prev[3] )
		&& ((VisualB_expected_prev[3] !== last_VisualB_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[3] = VisualB_expected_prev[3];
	end
	if (
		( VisualB_expected_prev[4] !== 1'bx ) && ( VisualB_prev[4] !== VisualB_expected_prev[4] )
		&& ((VisualB_expected_prev[4] !== last_VisualB_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[4] = VisualB_expected_prev[4];
	end
	if (
		( VisualB_expected_prev[5] !== 1'bx ) && ( VisualB_prev[5] !== VisualB_expected_prev[5] )
		&& ((VisualB_expected_prev[5] !== last_VisualB_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[5] = VisualB_expected_prev[5];
	end
	if (
		( VisualB_expected_prev[6] !== 1'bx ) && ( VisualB_prev[6] !== VisualB_expected_prev[6] )
		&& ((VisualB_expected_prev[6] !== last_VisualB_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[6] = VisualB_expected_prev[6];
	end
	if (
		( VisualB_expected_prev[7] !== 1'bx ) && ( VisualB_prev[7] !== VisualB_expected_prev[7] )
		&& ((VisualB_expected_prev[7] !== last_VisualB_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[7] = VisualB_expected_prev[7];
	end
	if (
		( VisualB_expected_prev[8] !== 1'bx ) && ( VisualB_prev[8] !== VisualB_expected_prev[8] )
		&& ((VisualB_expected_prev[8] !== last_VisualB_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[8] = VisualB_expected_prev[8];
	end
	if (
		( VisualB_expected_prev[9] !== 1'bx ) && ( VisualB_prev[9] !== VisualB_expected_prev[9] )
		&& ((VisualB_expected_prev[9] !== last_VisualB_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[9] = VisualB_expected_prev[9];
	end
	if (
		( VisualB_expected_prev[10] !== 1'bx ) && ( VisualB_prev[10] !== VisualB_expected_prev[10] )
		&& ((VisualB_expected_prev[10] !== last_VisualB_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[10] = VisualB_expected_prev[10];
	end
	if (
		( VisualB_expected_prev[11] !== 1'bx ) && ( VisualB_prev[11] !== VisualB_expected_prev[11] )
		&& ((VisualB_expected_prev[11] !== last_VisualB_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[11] = VisualB_expected_prev[11];
	end
	if (
		( VisualB_expected_prev[12] !== 1'bx ) && ( VisualB_prev[12] !== VisualB_expected_prev[12] )
		&& ((VisualB_expected_prev[12] !== last_VisualB_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[12] = VisualB_expected_prev[12];
	end
	if (
		( VisualB_expected_prev[13] !== 1'bx ) && ( VisualB_prev[13] !== VisualB_expected_prev[13] )
		&& ((VisualB_expected_prev[13] !== last_VisualB_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[13] = VisualB_expected_prev[13];
	end
	if (
		( VisualB_expected_prev[14] !== 1'bx ) && ( VisualB_prev[14] !== VisualB_expected_prev[14] )
		&& ((VisualB_expected_prev[14] !== last_VisualB_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[14] = VisualB_expected_prev[14];
	end
	if (
		( VisualB_expected_prev[15] !== 1'bx ) && ( VisualB_prev[15] !== VisualB_expected_prev[15] )
		&& ((VisualB_expected_prev[15] !== last_VisualB_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[15] = VisualB_expected_prev[15];
	end
	if (
		( VisualB_expected_prev[16] !== 1'bx ) && ( VisualB_prev[16] !== VisualB_expected_prev[16] )
		&& ((VisualB_expected_prev[16] !== last_VisualB_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[16] = VisualB_expected_prev[16];
	end
	if (
		( VisualB_expected_prev[17] !== 1'bx ) && ( VisualB_prev[17] !== VisualB_expected_prev[17] )
		&& ((VisualB_expected_prev[17] !== last_VisualB_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[17] = VisualB_expected_prev[17];
	end
	if (
		( VisualB_expected_prev[18] !== 1'bx ) && ( VisualB_prev[18] !== VisualB_expected_prev[18] )
		&& ((VisualB_expected_prev[18] !== last_VisualB_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[18] = VisualB_expected_prev[18];
	end
	if (
		( VisualB_expected_prev[19] !== 1'bx ) && ( VisualB_prev[19] !== VisualB_expected_prev[19] )
		&& ((VisualB_expected_prev[19] !== last_VisualB_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[19] = VisualB_expected_prev[19];
	end
	if (
		( VisualB_expected_prev[20] !== 1'bx ) && ( VisualB_prev[20] !== VisualB_expected_prev[20] )
		&& ((VisualB_expected_prev[20] !== last_VisualB_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[20] = VisualB_expected_prev[20];
	end
	if (
		( VisualB_expected_prev[21] !== 1'bx ) && ( VisualB_prev[21] !== VisualB_expected_prev[21] )
		&& ((VisualB_expected_prev[21] !== last_VisualB_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[21] = VisualB_expected_prev[21];
	end
	if (
		( VisualB_expected_prev[22] !== 1'bx ) && ( VisualB_prev[22] !== VisualB_expected_prev[22] )
		&& ((VisualB_expected_prev[22] !== last_VisualB_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[22] = VisualB_expected_prev[22];
	end
	if (
		( VisualB_expected_prev[23] !== 1'bx ) && ( VisualB_prev[23] !== VisualB_expected_prev[23] )
		&& ((VisualB_expected_prev[23] !== last_VisualB_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[23] = VisualB_expected_prev[23];
	end
	if (
		( VisualB_expected_prev[24] !== 1'bx ) && ( VisualB_prev[24] !== VisualB_expected_prev[24] )
		&& ((VisualB_expected_prev[24] !== last_VisualB_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[24] = VisualB_expected_prev[24];
	end
	if (
		( VisualB_expected_prev[25] !== 1'bx ) && ( VisualB_prev[25] !== VisualB_expected_prev[25] )
		&& ((VisualB_expected_prev[25] !== last_VisualB_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[25] = VisualB_expected_prev[25];
	end
	if (
		( VisualB_expected_prev[26] !== 1'bx ) && ( VisualB_prev[26] !== VisualB_expected_prev[26] )
		&& ((VisualB_expected_prev[26] !== last_VisualB_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[26] = VisualB_expected_prev[26];
	end
	if (
		( VisualB_expected_prev[27] !== 1'bx ) && ( VisualB_prev[27] !== VisualB_expected_prev[27] )
		&& ((VisualB_expected_prev[27] !== last_VisualB_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[27] = VisualB_expected_prev[27];
	end
	if (
		( VisualB_expected_prev[28] !== 1'bx ) && ( VisualB_prev[28] !== VisualB_expected_prev[28] )
		&& ((VisualB_expected_prev[28] !== last_VisualB_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[28] = VisualB_expected_prev[28];
	end
	if (
		( VisualB_expected_prev[29] !== 1'bx ) && ( VisualB_prev[29] !== VisualB_expected_prev[29] )
		&& ((VisualB_expected_prev[29] !== last_VisualB_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[29] = VisualB_expected_prev[29];
	end
	if (
		( VisualB_expected_prev[30] !== 1'bx ) && ( VisualB_prev[30] !== VisualB_expected_prev[30] )
		&& ((VisualB_expected_prev[30] !== last_VisualB_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[30] = VisualB_expected_prev[30];
	end
	if (
		( VisualB_expected_prev[31] !== 1'bx ) && ( VisualB_prev[31] !== VisualB_expected_prev[31] )
		&& ((VisualB_expected_prev[31] !== last_VisualB_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualB_expected_prev);
		$display ("     Real value = %b", VisualB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_VisualB_exp[31] = VisualB_expected_prev[31];
	end
	if (
		( VisualC_expected_prev[0] !== 1'bx ) && ( VisualC_prev[0] !== VisualC_expected_prev[0] )
		&& ((VisualC_expected_prev[0] !== last_VisualC_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[0] = VisualC_expected_prev[0];
	end
	if (
		( VisualC_expected_prev[1] !== 1'bx ) && ( VisualC_prev[1] !== VisualC_expected_prev[1] )
		&& ((VisualC_expected_prev[1] !== last_VisualC_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[1] = VisualC_expected_prev[1];
	end
	if (
		( VisualC_expected_prev[2] !== 1'bx ) && ( VisualC_prev[2] !== VisualC_expected_prev[2] )
		&& ((VisualC_expected_prev[2] !== last_VisualC_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[2] = VisualC_expected_prev[2];
	end
	if (
		( VisualC_expected_prev[3] !== 1'bx ) && ( VisualC_prev[3] !== VisualC_expected_prev[3] )
		&& ((VisualC_expected_prev[3] !== last_VisualC_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[3] = VisualC_expected_prev[3];
	end
	if (
		( VisualC_expected_prev[4] !== 1'bx ) && ( VisualC_prev[4] !== VisualC_expected_prev[4] )
		&& ((VisualC_expected_prev[4] !== last_VisualC_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[4] = VisualC_expected_prev[4];
	end
	if (
		( VisualC_expected_prev[5] !== 1'bx ) && ( VisualC_prev[5] !== VisualC_expected_prev[5] )
		&& ((VisualC_expected_prev[5] !== last_VisualC_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[5] = VisualC_expected_prev[5];
	end
	if (
		( VisualC_expected_prev[6] !== 1'bx ) && ( VisualC_prev[6] !== VisualC_expected_prev[6] )
		&& ((VisualC_expected_prev[6] !== last_VisualC_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[6] = VisualC_expected_prev[6];
	end
	if (
		( VisualC_expected_prev[7] !== 1'bx ) && ( VisualC_prev[7] !== VisualC_expected_prev[7] )
		&& ((VisualC_expected_prev[7] !== last_VisualC_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[7] = VisualC_expected_prev[7];
	end
	if (
		( VisualC_expected_prev[8] !== 1'bx ) && ( VisualC_prev[8] !== VisualC_expected_prev[8] )
		&& ((VisualC_expected_prev[8] !== last_VisualC_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[8] = VisualC_expected_prev[8];
	end
	if (
		( VisualC_expected_prev[9] !== 1'bx ) && ( VisualC_prev[9] !== VisualC_expected_prev[9] )
		&& ((VisualC_expected_prev[9] !== last_VisualC_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[9] = VisualC_expected_prev[9];
	end
	if (
		( VisualC_expected_prev[10] !== 1'bx ) && ( VisualC_prev[10] !== VisualC_expected_prev[10] )
		&& ((VisualC_expected_prev[10] !== last_VisualC_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[10] = VisualC_expected_prev[10];
	end
	if (
		( VisualC_expected_prev[11] !== 1'bx ) && ( VisualC_prev[11] !== VisualC_expected_prev[11] )
		&& ((VisualC_expected_prev[11] !== last_VisualC_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[11] = VisualC_expected_prev[11];
	end
	if (
		( VisualC_expected_prev[12] !== 1'bx ) && ( VisualC_prev[12] !== VisualC_expected_prev[12] )
		&& ((VisualC_expected_prev[12] !== last_VisualC_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[12] = VisualC_expected_prev[12];
	end
	if (
		( VisualC_expected_prev[13] !== 1'bx ) && ( VisualC_prev[13] !== VisualC_expected_prev[13] )
		&& ((VisualC_expected_prev[13] !== last_VisualC_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[13] = VisualC_expected_prev[13];
	end
	if (
		( VisualC_expected_prev[14] !== 1'bx ) && ( VisualC_prev[14] !== VisualC_expected_prev[14] )
		&& ((VisualC_expected_prev[14] !== last_VisualC_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[14] = VisualC_expected_prev[14];
	end
	if (
		( VisualC_expected_prev[15] !== 1'bx ) && ( VisualC_prev[15] !== VisualC_expected_prev[15] )
		&& ((VisualC_expected_prev[15] !== last_VisualC_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[15] = VisualC_expected_prev[15];
	end
	if (
		( VisualC_expected_prev[16] !== 1'bx ) && ( VisualC_prev[16] !== VisualC_expected_prev[16] )
		&& ((VisualC_expected_prev[16] !== last_VisualC_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[16] = VisualC_expected_prev[16];
	end
	if (
		( VisualC_expected_prev[17] !== 1'bx ) && ( VisualC_prev[17] !== VisualC_expected_prev[17] )
		&& ((VisualC_expected_prev[17] !== last_VisualC_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[17] = VisualC_expected_prev[17];
	end
	if (
		( VisualC_expected_prev[18] !== 1'bx ) && ( VisualC_prev[18] !== VisualC_expected_prev[18] )
		&& ((VisualC_expected_prev[18] !== last_VisualC_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[18] = VisualC_expected_prev[18];
	end
	if (
		( VisualC_expected_prev[19] !== 1'bx ) && ( VisualC_prev[19] !== VisualC_expected_prev[19] )
		&& ((VisualC_expected_prev[19] !== last_VisualC_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[19] = VisualC_expected_prev[19];
	end
	if (
		( VisualC_expected_prev[20] !== 1'bx ) && ( VisualC_prev[20] !== VisualC_expected_prev[20] )
		&& ((VisualC_expected_prev[20] !== last_VisualC_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[20] = VisualC_expected_prev[20];
	end
	if (
		( VisualC_expected_prev[21] !== 1'bx ) && ( VisualC_prev[21] !== VisualC_expected_prev[21] )
		&& ((VisualC_expected_prev[21] !== last_VisualC_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[21] = VisualC_expected_prev[21];
	end
	if (
		( VisualC_expected_prev[22] !== 1'bx ) && ( VisualC_prev[22] !== VisualC_expected_prev[22] )
		&& ((VisualC_expected_prev[22] !== last_VisualC_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[22] = VisualC_expected_prev[22];
	end
	if (
		( VisualC_expected_prev[23] !== 1'bx ) && ( VisualC_prev[23] !== VisualC_expected_prev[23] )
		&& ((VisualC_expected_prev[23] !== last_VisualC_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[23] = VisualC_expected_prev[23];
	end
	if (
		( VisualC_expected_prev[24] !== 1'bx ) && ( VisualC_prev[24] !== VisualC_expected_prev[24] )
		&& ((VisualC_expected_prev[24] !== last_VisualC_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[24] = VisualC_expected_prev[24];
	end
	if (
		( VisualC_expected_prev[25] !== 1'bx ) && ( VisualC_prev[25] !== VisualC_expected_prev[25] )
		&& ((VisualC_expected_prev[25] !== last_VisualC_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[25] = VisualC_expected_prev[25];
	end
	if (
		( VisualC_expected_prev[26] !== 1'bx ) && ( VisualC_prev[26] !== VisualC_expected_prev[26] )
		&& ((VisualC_expected_prev[26] !== last_VisualC_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[26] = VisualC_expected_prev[26];
	end
	if (
		( VisualC_expected_prev[27] !== 1'bx ) && ( VisualC_prev[27] !== VisualC_expected_prev[27] )
		&& ((VisualC_expected_prev[27] !== last_VisualC_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[27] = VisualC_expected_prev[27];
	end
	if (
		( VisualC_expected_prev[28] !== 1'bx ) && ( VisualC_prev[28] !== VisualC_expected_prev[28] )
		&& ((VisualC_expected_prev[28] !== last_VisualC_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[28] = VisualC_expected_prev[28];
	end
	if (
		( VisualC_expected_prev[29] !== 1'bx ) && ( VisualC_prev[29] !== VisualC_expected_prev[29] )
		&& ((VisualC_expected_prev[29] !== last_VisualC_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[29] = VisualC_expected_prev[29];
	end
	if (
		( VisualC_expected_prev[30] !== 1'bx ) && ( VisualC_prev[30] !== VisualC_expected_prev[30] )
		&& ((VisualC_expected_prev[30] !== last_VisualC_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[30] = VisualC_expected_prev[30];
	end
	if (
		( VisualC_expected_prev[31] !== 1'bx ) && ( VisualC_prev[31] !== VisualC_expected_prev[31] )
		&& ((VisualC_expected_prev[31] !== last_VisualC_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualC_expected_prev);
		$display ("     Real value = %b", VisualC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_VisualC_exp[31] = VisualC_expected_prev[31];
	end
	if (
		( VisualD_expected_prev[0] !== 1'bx ) && ( VisualD_prev[0] !== VisualD_expected_prev[0] )
		&& ((VisualD_expected_prev[0] !== last_VisualD_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[0] = VisualD_expected_prev[0];
	end
	if (
		( VisualD_expected_prev[1] !== 1'bx ) && ( VisualD_prev[1] !== VisualD_expected_prev[1] )
		&& ((VisualD_expected_prev[1] !== last_VisualD_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[1] = VisualD_expected_prev[1];
	end
	if (
		( VisualD_expected_prev[2] !== 1'bx ) && ( VisualD_prev[2] !== VisualD_expected_prev[2] )
		&& ((VisualD_expected_prev[2] !== last_VisualD_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[2] = VisualD_expected_prev[2];
	end
	if (
		( VisualD_expected_prev[3] !== 1'bx ) && ( VisualD_prev[3] !== VisualD_expected_prev[3] )
		&& ((VisualD_expected_prev[3] !== last_VisualD_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[3] = VisualD_expected_prev[3];
	end
	if (
		( VisualD_expected_prev[4] !== 1'bx ) && ( VisualD_prev[4] !== VisualD_expected_prev[4] )
		&& ((VisualD_expected_prev[4] !== last_VisualD_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[4] = VisualD_expected_prev[4];
	end
	if (
		( VisualD_expected_prev[5] !== 1'bx ) && ( VisualD_prev[5] !== VisualD_expected_prev[5] )
		&& ((VisualD_expected_prev[5] !== last_VisualD_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[5] = VisualD_expected_prev[5];
	end
	if (
		( VisualD_expected_prev[6] !== 1'bx ) && ( VisualD_prev[6] !== VisualD_expected_prev[6] )
		&& ((VisualD_expected_prev[6] !== last_VisualD_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[6] = VisualD_expected_prev[6];
	end
	if (
		( VisualD_expected_prev[7] !== 1'bx ) && ( VisualD_prev[7] !== VisualD_expected_prev[7] )
		&& ((VisualD_expected_prev[7] !== last_VisualD_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[7] = VisualD_expected_prev[7];
	end
	if (
		( VisualD_expected_prev[8] !== 1'bx ) && ( VisualD_prev[8] !== VisualD_expected_prev[8] )
		&& ((VisualD_expected_prev[8] !== last_VisualD_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[8] = VisualD_expected_prev[8];
	end
	if (
		( VisualD_expected_prev[9] !== 1'bx ) && ( VisualD_prev[9] !== VisualD_expected_prev[9] )
		&& ((VisualD_expected_prev[9] !== last_VisualD_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[9] = VisualD_expected_prev[9];
	end
	if (
		( VisualD_expected_prev[10] !== 1'bx ) && ( VisualD_prev[10] !== VisualD_expected_prev[10] )
		&& ((VisualD_expected_prev[10] !== last_VisualD_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[10] = VisualD_expected_prev[10];
	end
	if (
		( VisualD_expected_prev[11] !== 1'bx ) && ( VisualD_prev[11] !== VisualD_expected_prev[11] )
		&& ((VisualD_expected_prev[11] !== last_VisualD_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[11] = VisualD_expected_prev[11];
	end
	if (
		( VisualD_expected_prev[12] !== 1'bx ) && ( VisualD_prev[12] !== VisualD_expected_prev[12] )
		&& ((VisualD_expected_prev[12] !== last_VisualD_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[12] = VisualD_expected_prev[12];
	end
	if (
		( VisualD_expected_prev[13] !== 1'bx ) && ( VisualD_prev[13] !== VisualD_expected_prev[13] )
		&& ((VisualD_expected_prev[13] !== last_VisualD_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[13] = VisualD_expected_prev[13];
	end
	if (
		( VisualD_expected_prev[14] !== 1'bx ) && ( VisualD_prev[14] !== VisualD_expected_prev[14] )
		&& ((VisualD_expected_prev[14] !== last_VisualD_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[14] = VisualD_expected_prev[14];
	end
	if (
		( VisualD_expected_prev[15] !== 1'bx ) && ( VisualD_prev[15] !== VisualD_expected_prev[15] )
		&& ((VisualD_expected_prev[15] !== last_VisualD_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[15] = VisualD_expected_prev[15];
	end
	if (
		( VisualD_expected_prev[16] !== 1'bx ) && ( VisualD_prev[16] !== VisualD_expected_prev[16] )
		&& ((VisualD_expected_prev[16] !== last_VisualD_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[16] = VisualD_expected_prev[16];
	end
	if (
		( VisualD_expected_prev[17] !== 1'bx ) && ( VisualD_prev[17] !== VisualD_expected_prev[17] )
		&& ((VisualD_expected_prev[17] !== last_VisualD_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[17] = VisualD_expected_prev[17];
	end
	if (
		( VisualD_expected_prev[18] !== 1'bx ) && ( VisualD_prev[18] !== VisualD_expected_prev[18] )
		&& ((VisualD_expected_prev[18] !== last_VisualD_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[18] = VisualD_expected_prev[18];
	end
	if (
		( VisualD_expected_prev[19] !== 1'bx ) && ( VisualD_prev[19] !== VisualD_expected_prev[19] )
		&& ((VisualD_expected_prev[19] !== last_VisualD_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[19] = VisualD_expected_prev[19];
	end
	if (
		( VisualD_expected_prev[20] !== 1'bx ) && ( VisualD_prev[20] !== VisualD_expected_prev[20] )
		&& ((VisualD_expected_prev[20] !== last_VisualD_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[20] = VisualD_expected_prev[20];
	end
	if (
		( VisualD_expected_prev[21] !== 1'bx ) && ( VisualD_prev[21] !== VisualD_expected_prev[21] )
		&& ((VisualD_expected_prev[21] !== last_VisualD_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[21] = VisualD_expected_prev[21];
	end
	if (
		( VisualD_expected_prev[22] !== 1'bx ) && ( VisualD_prev[22] !== VisualD_expected_prev[22] )
		&& ((VisualD_expected_prev[22] !== last_VisualD_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[22] = VisualD_expected_prev[22];
	end
	if (
		( VisualD_expected_prev[23] !== 1'bx ) && ( VisualD_prev[23] !== VisualD_expected_prev[23] )
		&& ((VisualD_expected_prev[23] !== last_VisualD_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[23] = VisualD_expected_prev[23];
	end
	if (
		( VisualD_expected_prev[24] !== 1'bx ) && ( VisualD_prev[24] !== VisualD_expected_prev[24] )
		&& ((VisualD_expected_prev[24] !== last_VisualD_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[24] = VisualD_expected_prev[24];
	end
	if (
		( VisualD_expected_prev[25] !== 1'bx ) && ( VisualD_prev[25] !== VisualD_expected_prev[25] )
		&& ((VisualD_expected_prev[25] !== last_VisualD_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[25] = VisualD_expected_prev[25];
	end
	if (
		( VisualD_expected_prev[26] !== 1'bx ) && ( VisualD_prev[26] !== VisualD_expected_prev[26] )
		&& ((VisualD_expected_prev[26] !== last_VisualD_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[26] = VisualD_expected_prev[26];
	end
	if (
		( VisualD_expected_prev[27] !== 1'bx ) && ( VisualD_prev[27] !== VisualD_expected_prev[27] )
		&& ((VisualD_expected_prev[27] !== last_VisualD_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[27] = VisualD_expected_prev[27];
	end
	if (
		( VisualD_expected_prev[28] !== 1'bx ) && ( VisualD_prev[28] !== VisualD_expected_prev[28] )
		&& ((VisualD_expected_prev[28] !== last_VisualD_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[28] = VisualD_expected_prev[28];
	end
	if (
		( VisualD_expected_prev[29] !== 1'bx ) && ( VisualD_prev[29] !== VisualD_expected_prev[29] )
		&& ((VisualD_expected_prev[29] !== last_VisualD_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[29] = VisualD_expected_prev[29];
	end
	if (
		( VisualD_expected_prev[30] !== 1'bx ) && ( VisualD_prev[30] !== VisualD_expected_prev[30] )
		&& ((VisualD_expected_prev[30] !== last_VisualD_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[30] = VisualD_expected_prev[30];
	end
	if (
		( VisualD_expected_prev[31] !== 1'bx ) && ( VisualD_prev[31] !== VisualD_expected_prev[31] )
		&& ((VisualD_expected_prev[31] !== last_VisualD_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualD[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualD_expected_prev);
		$display ("     Real value = %b", VisualD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_VisualD_exp[31] = VisualD_expected_prev[31];
	end
	if (
		( VisualE_expected_prev[0] !== 1'bx ) && ( VisualE_prev[0] !== VisualE_expected_prev[0] )
		&& ((VisualE_expected_prev[0] !== last_VisualE_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[0] = VisualE_expected_prev[0];
	end
	if (
		( VisualE_expected_prev[1] !== 1'bx ) && ( VisualE_prev[1] !== VisualE_expected_prev[1] )
		&& ((VisualE_expected_prev[1] !== last_VisualE_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[1] = VisualE_expected_prev[1];
	end
	if (
		( VisualE_expected_prev[2] !== 1'bx ) && ( VisualE_prev[2] !== VisualE_expected_prev[2] )
		&& ((VisualE_expected_prev[2] !== last_VisualE_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[2] = VisualE_expected_prev[2];
	end
	if (
		( VisualE_expected_prev[3] !== 1'bx ) && ( VisualE_prev[3] !== VisualE_expected_prev[3] )
		&& ((VisualE_expected_prev[3] !== last_VisualE_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[3] = VisualE_expected_prev[3];
	end
	if (
		( VisualE_expected_prev[4] !== 1'bx ) && ( VisualE_prev[4] !== VisualE_expected_prev[4] )
		&& ((VisualE_expected_prev[4] !== last_VisualE_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[4] = VisualE_expected_prev[4];
	end
	if (
		( VisualE_expected_prev[5] !== 1'bx ) && ( VisualE_prev[5] !== VisualE_expected_prev[5] )
		&& ((VisualE_expected_prev[5] !== last_VisualE_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[5] = VisualE_expected_prev[5];
	end
	if (
		( VisualE_expected_prev[6] !== 1'bx ) && ( VisualE_prev[6] !== VisualE_expected_prev[6] )
		&& ((VisualE_expected_prev[6] !== last_VisualE_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[6] = VisualE_expected_prev[6];
	end
	if (
		( VisualE_expected_prev[7] !== 1'bx ) && ( VisualE_prev[7] !== VisualE_expected_prev[7] )
		&& ((VisualE_expected_prev[7] !== last_VisualE_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[7] = VisualE_expected_prev[7];
	end
	if (
		( VisualE_expected_prev[8] !== 1'bx ) && ( VisualE_prev[8] !== VisualE_expected_prev[8] )
		&& ((VisualE_expected_prev[8] !== last_VisualE_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[8] = VisualE_expected_prev[8];
	end
	if (
		( VisualE_expected_prev[9] !== 1'bx ) && ( VisualE_prev[9] !== VisualE_expected_prev[9] )
		&& ((VisualE_expected_prev[9] !== last_VisualE_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[9] = VisualE_expected_prev[9];
	end
	if (
		( VisualE_expected_prev[10] !== 1'bx ) && ( VisualE_prev[10] !== VisualE_expected_prev[10] )
		&& ((VisualE_expected_prev[10] !== last_VisualE_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[10] = VisualE_expected_prev[10];
	end
	if (
		( VisualE_expected_prev[11] !== 1'bx ) && ( VisualE_prev[11] !== VisualE_expected_prev[11] )
		&& ((VisualE_expected_prev[11] !== last_VisualE_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[11] = VisualE_expected_prev[11];
	end
	if (
		( VisualE_expected_prev[12] !== 1'bx ) && ( VisualE_prev[12] !== VisualE_expected_prev[12] )
		&& ((VisualE_expected_prev[12] !== last_VisualE_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[12] = VisualE_expected_prev[12];
	end
	if (
		( VisualE_expected_prev[13] !== 1'bx ) && ( VisualE_prev[13] !== VisualE_expected_prev[13] )
		&& ((VisualE_expected_prev[13] !== last_VisualE_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[13] = VisualE_expected_prev[13];
	end
	if (
		( VisualE_expected_prev[14] !== 1'bx ) && ( VisualE_prev[14] !== VisualE_expected_prev[14] )
		&& ((VisualE_expected_prev[14] !== last_VisualE_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[14] = VisualE_expected_prev[14];
	end
	if (
		( VisualE_expected_prev[15] !== 1'bx ) && ( VisualE_prev[15] !== VisualE_expected_prev[15] )
		&& ((VisualE_expected_prev[15] !== last_VisualE_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[15] = VisualE_expected_prev[15];
	end
	if (
		( VisualE_expected_prev[16] !== 1'bx ) && ( VisualE_prev[16] !== VisualE_expected_prev[16] )
		&& ((VisualE_expected_prev[16] !== last_VisualE_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[16] = VisualE_expected_prev[16];
	end
	if (
		( VisualE_expected_prev[17] !== 1'bx ) && ( VisualE_prev[17] !== VisualE_expected_prev[17] )
		&& ((VisualE_expected_prev[17] !== last_VisualE_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[17] = VisualE_expected_prev[17];
	end
	if (
		( VisualE_expected_prev[18] !== 1'bx ) && ( VisualE_prev[18] !== VisualE_expected_prev[18] )
		&& ((VisualE_expected_prev[18] !== last_VisualE_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[18] = VisualE_expected_prev[18];
	end
	if (
		( VisualE_expected_prev[19] !== 1'bx ) && ( VisualE_prev[19] !== VisualE_expected_prev[19] )
		&& ((VisualE_expected_prev[19] !== last_VisualE_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[19] = VisualE_expected_prev[19];
	end
	if (
		( VisualE_expected_prev[20] !== 1'bx ) && ( VisualE_prev[20] !== VisualE_expected_prev[20] )
		&& ((VisualE_expected_prev[20] !== last_VisualE_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[20] = VisualE_expected_prev[20];
	end
	if (
		( VisualE_expected_prev[21] !== 1'bx ) && ( VisualE_prev[21] !== VisualE_expected_prev[21] )
		&& ((VisualE_expected_prev[21] !== last_VisualE_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[21] = VisualE_expected_prev[21];
	end
	if (
		( VisualE_expected_prev[22] !== 1'bx ) && ( VisualE_prev[22] !== VisualE_expected_prev[22] )
		&& ((VisualE_expected_prev[22] !== last_VisualE_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[22] = VisualE_expected_prev[22];
	end
	if (
		( VisualE_expected_prev[23] !== 1'bx ) && ( VisualE_prev[23] !== VisualE_expected_prev[23] )
		&& ((VisualE_expected_prev[23] !== last_VisualE_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[23] = VisualE_expected_prev[23];
	end
	if (
		( VisualE_expected_prev[24] !== 1'bx ) && ( VisualE_prev[24] !== VisualE_expected_prev[24] )
		&& ((VisualE_expected_prev[24] !== last_VisualE_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[24] = VisualE_expected_prev[24];
	end
	if (
		( VisualE_expected_prev[25] !== 1'bx ) && ( VisualE_prev[25] !== VisualE_expected_prev[25] )
		&& ((VisualE_expected_prev[25] !== last_VisualE_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[25] = VisualE_expected_prev[25];
	end
	if (
		( VisualE_expected_prev[26] !== 1'bx ) && ( VisualE_prev[26] !== VisualE_expected_prev[26] )
		&& ((VisualE_expected_prev[26] !== last_VisualE_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[26] = VisualE_expected_prev[26];
	end
	if (
		( VisualE_expected_prev[27] !== 1'bx ) && ( VisualE_prev[27] !== VisualE_expected_prev[27] )
		&& ((VisualE_expected_prev[27] !== last_VisualE_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[27] = VisualE_expected_prev[27];
	end
	if (
		( VisualE_expected_prev[28] !== 1'bx ) && ( VisualE_prev[28] !== VisualE_expected_prev[28] )
		&& ((VisualE_expected_prev[28] !== last_VisualE_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[28] = VisualE_expected_prev[28];
	end
	if (
		( VisualE_expected_prev[29] !== 1'bx ) && ( VisualE_prev[29] !== VisualE_expected_prev[29] )
		&& ((VisualE_expected_prev[29] !== last_VisualE_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[29] = VisualE_expected_prev[29];
	end
	if (
		( VisualE_expected_prev[30] !== 1'bx ) && ( VisualE_prev[30] !== VisualE_expected_prev[30] )
		&& ((VisualE_expected_prev[30] !== last_VisualE_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[30] = VisualE_expected_prev[30];
	end
	if (
		( VisualE_expected_prev[31] !== 1'bx ) && ( VisualE_prev[31] !== VisualE_expected_prev[31] )
		&& ((VisualE_expected_prev[31] !== last_VisualE_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualE[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualE_expected_prev);
		$display ("     Real value = %b", VisualE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VisualE_exp[31] = VisualE_expected_prev[31];
	end
	if (
		( VisualF_expected_prev[0] !== 1'bx ) && ( VisualF_prev[0] !== VisualF_expected_prev[0] )
		&& ((VisualF_expected_prev[0] !== last_VisualF_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[0] = VisualF_expected_prev[0];
	end
	if (
		( VisualF_expected_prev[1] !== 1'bx ) && ( VisualF_prev[1] !== VisualF_expected_prev[1] )
		&& ((VisualF_expected_prev[1] !== last_VisualF_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[1] = VisualF_expected_prev[1];
	end
	if (
		( VisualF_expected_prev[2] !== 1'bx ) && ( VisualF_prev[2] !== VisualF_expected_prev[2] )
		&& ((VisualF_expected_prev[2] !== last_VisualF_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[2] = VisualF_expected_prev[2];
	end
	if (
		( VisualF_expected_prev[3] !== 1'bx ) && ( VisualF_prev[3] !== VisualF_expected_prev[3] )
		&& ((VisualF_expected_prev[3] !== last_VisualF_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[3] = VisualF_expected_prev[3];
	end
	if (
		( VisualF_expected_prev[4] !== 1'bx ) && ( VisualF_prev[4] !== VisualF_expected_prev[4] )
		&& ((VisualF_expected_prev[4] !== last_VisualF_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[4] = VisualF_expected_prev[4];
	end
	if (
		( VisualF_expected_prev[5] !== 1'bx ) && ( VisualF_prev[5] !== VisualF_expected_prev[5] )
		&& ((VisualF_expected_prev[5] !== last_VisualF_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[5] = VisualF_expected_prev[5];
	end
	if (
		( VisualF_expected_prev[6] !== 1'bx ) && ( VisualF_prev[6] !== VisualF_expected_prev[6] )
		&& ((VisualF_expected_prev[6] !== last_VisualF_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[6] = VisualF_expected_prev[6];
	end
	if (
		( VisualF_expected_prev[7] !== 1'bx ) && ( VisualF_prev[7] !== VisualF_expected_prev[7] )
		&& ((VisualF_expected_prev[7] !== last_VisualF_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[7] = VisualF_expected_prev[7];
	end
	if (
		( VisualF_expected_prev[8] !== 1'bx ) && ( VisualF_prev[8] !== VisualF_expected_prev[8] )
		&& ((VisualF_expected_prev[8] !== last_VisualF_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[8] = VisualF_expected_prev[8];
	end
	if (
		( VisualF_expected_prev[9] !== 1'bx ) && ( VisualF_prev[9] !== VisualF_expected_prev[9] )
		&& ((VisualF_expected_prev[9] !== last_VisualF_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[9] = VisualF_expected_prev[9];
	end
	if (
		( VisualF_expected_prev[10] !== 1'bx ) && ( VisualF_prev[10] !== VisualF_expected_prev[10] )
		&& ((VisualF_expected_prev[10] !== last_VisualF_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[10] = VisualF_expected_prev[10];
	end
	if (
		( VisualF_expected_prev[11] !== 1'bx ) && ( VisualF_prev[11] !== VisualF_expected_prev[11] )
		&& ((VisualF_expected_prev[11] !== last_VisualF_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[11] = VisualF_expected_prev[11];
	end
	if (
		( VisualF_expected_prev[12] !== 1'bx ) && ( VisualF_prev[12] !== VisualF_expected_prev[12] )
		&& ((VisualF_expected_prev[12] !== last_VisualF_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[12] = VisualF_expected_prev[12];
	end
	if (
		( VisualF_expected_prev[13] !== 1'bx ) && ( VisualF_prev[13] !== VisualF_expected_prev[13] )
		&& ((VisualF_expected_prev[13] !== last_VisualF_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[13] = VisualF_expected_prev[13];
	end
	if (
		( VisualF_expected_prev[14] !== 1'bx ) && ( VisualF_prev[14] !== VisualF_expected_prev[14] )
		&& ((VisualF_expected_prev[14] !== last_VisualF_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[14] = VisualF_expected_prev[14];
	end
	if (
		( VisualF_expected_prev[15] !== 1'bx ) && ( VisualF_prev[15] !== VisualF_expected_prev[15] )
		&& ((VisualF_expected_prev[15] !== last_VisualF_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[15] = VisualF_expected_prev[15];
	end
	if (
		( VisualF_expected_prev[16] !== 1'bx ) && ( VisualF_prev[16] !== VisualF_expected_prev[16] )
		&& ((VisualF_expected_prev[16] !== last_VisualF_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[16] = VisualF_expected_prev[16];
	end
	if (
		( VisualF_expected_prev[17] !== 1'bx ) && ( VisualF_prev[17] !== VisualF_expected_prev[17] )
		&& ((VisualF_expected_prev[17] !== last_VisualF_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[17] = VisualF_expected_prev[17];
	end
	if (
		( VisualF_expected_prev[18] !== 1'bx ) && ( VisualF_prev[18] !== VisualF_expected_prev[18] )
		&& ((VisualF_expected_prev[18] !== last_VisualF_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[18] = VisualF_expected_prev[18];
	end
	if (
		( VisualF_expected_prev[19] !== 1'bx ) && ( VisualF_prev[19] !== VisualF_expected_prev[19] )
		&& ((VisualF_expected_prev[19] !== last_VisualF_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[19] = VisualF_expected_prev[19];
	end
	if (
		( VisualF_expected_prev[20] !== 1'bx ) && ( VisualF_prev[20] !== VisualF_expected_prev[20] )
		&& ((VisualF_expected_prev[20] !== last_VisualF_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[20] = VisualF_expected_prev[20];
	end
	if (
		( VisualF_expected_prev[21] !== 1'bx ) && ( VisualF_prev[21] !== VisualF_expected_prev[21] )
		&& ((VisualF_expected_prev[21] !== last_VisualF_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[21] = VisualF_expected_prev[21];
	end
	if (
		( VisualF_expected_prev[22] !== 1'bx ) && ( VisualF_prev[22] !== VisualF_expected_prev[22] )
		&& ((VisualF_expected_prev[22] !== last_VisualF_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[22] = VisualF_expected_prev[22];
	end
	if (
		( VisualF_expected_prev[23] !== 1'bx ) && ( VisualF_prev[23] !== VisualF_expected_prev[23] )
		&& ((VisualF_expected_prev[23] !== last_VisualF_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[23] = VisualF_expected_prev[23];
	end
	if (
		( VisualF_expected_prev[24] !== 1'bx ) && ( VisualF_prev[24] !== VisualF_expected_prev[24] )
		&& ((VisualF_expected_prev[24] !== last_VisualF_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[24] = VisualF_expected_prev[24];
	end
	if (
		( VisualF_expected_prev[25] !== 1'bx ) && ( VisualF_prev[25] !== VisualF_expected_prev[25] )
		&& ((VisualF_expected_prev[25] !== last_VisualF_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[25] = VisualF_expected_prev[25];
	end
	if (
		( VisualF_expected_prev[26] !== 1'bx ) && ( VisualF_prev[26] !== VisualF_expected_prev[26] )
		&& ((VisualF_expected_prev[26] !== last_VisualF_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[26] = VisualF_expected_prev[26];
	end
	if (
		( VisualF_expected_prev[27] !== 1'bx ) && ( VisualF_prev[27] !== VisualF_expected_prev[27] )
		&& ((VisualF_expected_prev[27] !== last_VisualF_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[27] = VisualF_expected_prev[27];
	end
	if (
		( VisualF_expected_prev[28] !== 1'bx ) && ( VisualF_prev[28] !== VisualF_expected_prev[28] )
		&& ((VisualF_expected_prev[28] !== last_VisualF_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[28] = VisualF_expected_prev[28];
	end
	if (
		( VisualF_expected_prev[29] !== 1'bx ) && ( VisualF_prev[29] !== VisualF_expected_prev[29] )
		&& ((VisualF_expected_prev[29] !== last_VisualF_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[29] = VisualF_expected_prev[29];
	end
	if (
		( VisualF_expected_prev[30] !== 1'bx ) && ( VisualF_prev[30] !== VisualF_expected_prev[30] )
		&& ((VisualF_expected_prev[30] !== last_VisualF_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[30] = VisualF_expected_prev[30];
	end
	if (
		( VisualF_expected_prev[31] !== 1'bx ) && ( VisualF_prev[31] !== VisualF_expected_prev[31] )
		&& ((VisualF_expected_prev[31] !== last_VisualF_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VisualF[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VisualF_expected_prev);
		$display ("     Real value = %b", VisualF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VisualF_exp[31] = VisualF_expected_prev[31];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ProcessadorMips_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [4:0] regA;
reg [4:0] regB;
reg [4:0] regC;
reg [4:0] regD;
reg [4:0] regE;
reg [4:0] regF;
reg Reset;
reg [4:0] sempre31;
// wires                                               
wire [2:0] Ch_select_pc;
wire [31:0] Data_in_reg;
wire [31:0] ent2;
wire [31:0] instrucao;
wire [11:0] n_intrucao;
wire [4:0] Opalu;
wire Overflow;
wire [31:0] Reg_1;
wire [31:0] Reg_2;
wire [31:0] Result;
wire [31:0] VisualA;
wire [31:0] VisualB;
wire [31:0] VisualC;
wire [31:0] VisualD;
wire [31:0] VisualE;
wire [31:0] VisualF;
wire zero;

wire sampler;                             

// assign statements (if any)                          
ProcessadorMips i1 (
// port map - connection between master ports and signals/registers   
	.Ch_select_pc(Ch_select_pc),
	.Clock(Clock),
	.Data_in_reg(Data_in_reg),
	.ent2(ent2),
	.instrucao(instrucao),
	.n_intrucao(n_intrucao),
	.Opalu(Opalu),
	.Overflow(Overflow),
	.Reg_1(Reg_1),
	.Reg_2(Reg_2),
	.regA(regA),
	.regB(regB),
	.regC(regC),
	.regD(regD),
	.regE(regE),
	.regF(regF),
	.Reset(Reset),
	.Result(Result),
	.sempre31(sempre31),
	.VisualA(VisualA),
	.VisualB(VisualB),
	.VisualC(VisualC),
	.VisualD(VisualD),
	.VisualE(VisualE),
	.VisualF(VisualF),
	.zero(zero)
);
// sempre31[ 4 ]
initial
begin
	sempre31[4] = 1'b1;
end 
// sempre31[ 3 ]
initial
begin
	sempre31[3] = 1'b1;
end 
// sempre31[ 2 ]
initial
begin
	sempre31[2] = 1'b1;
end 
// sempre31[ 1 ]
initial
begin
	sempre31[1] = 1'b1;
end 
// sempre31[ 0 ]
initial
begin
	sempre31[0] = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #320000 1'b0;
end 
// regA[ 4 ]
initial
begin
	regA[4] = 1'b0;
end 
// regA[ 3 ]
initial
begin
	regA[3] = 1'b1;
end 
// regA[ 2 ]
initial
begin
	regA[2] = 1'b1;
end 
// regA[ 1 ]
initial
begin
	regA[1] = 1'b1;
end 
// regA[ 0 ]
initial
begin
	regA[0] = 1'b0;
end 
// regB[ 4 ]
initial
begin
	regB[4] = 1'b0;
end 
// regB[ 3 ]
initial
begin
	regB[3] = 1'b1;
end 
// regB[ 2 ]
initial
begin
	regB[2] = 1'b1;
end 
// regB[ 1 ]
initial
begin
	regB[1] = 1'b1;
end 
// regB[ 0 ]
initial
begin
	regB[0] = 1'b1;
end 
// regC[ 4 ]
initial
begin
	regC[4] = 1'b1;
end 
// regC[ 3 ]
initial
begin
	regC[3] = 1'b0;
end 
// regC[ 2 ]
initial
begin
	regC[2] = 1'b0;
end 
// regC[ 1 ]
initial
begin
	regC[1] = 1'b0;
end 
// regC[ 0 ]
initial
begin
	regC[0] = 1'b0;
end 
// regD[ 4 ]
initial
begin
	regD[4] = 1'b1;
end 
// regD[ 3 ]
initial
begin
	regD[3] = 1'b0;
end 
// regD[ 2 ]
initial
begin
	regD[2] = 1'b0;
end 
// regD[ 1 ]
initial
begin
	regD[1] = 1'b0;
end 
// regD[ 0 ]
initial
begin
	regD[0] = 1'b1;
end 
// regE[ 4 ]
initial
begin
	regE[4] = 1'b1;
end 
// regE[ 3 ]
initial
begin
	regE[3] = 1'b0;
end 
// regE[ 2 ]
initial
begin
	regE[2] = 1'b0;
end 
// regE[ 1 ]
initial
begin
	regE[1] = 1'b1;
end 
// regE[ 0 ]
initial
begin
	regE[0] = 1'b0;
end 
// regF[ 4 ]
initial
begin
	regF[4] = 1'b1;
end 
// regF[ 3 ]
initial
begin
	regF[3] = 1'b0;
end 
// regF[ 2 ]
initial
begin
	regF[2] = 1'b0;
end 
// regF[ 1 ]
initial
begin
	regF[1] = 1'b1;
end 
// regF[ 0 ]
initial
begin
	regF[0] = 1'b1;
end 

ProcessadorMips_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.regA(regA),
	.regB(regB),
	.regC(regC),
	.regD(regD),
	.regE(regE),
	.regF(regF),
	.Reset(Reset),
	.sempre31(sempre31),
	.sampler_tx(sampler)
);

ProcessadorMips_vlg_check_tst tb_out(
	.Ch_select_pc(Ch_select_pc),
	.Data_in_reg(Data_in_reg),
	.ent2(ent2),
	.instrucao(instrucao),
	.n_intrucao(n_intrucao),
	.Opalu(Opalu),
	.Overflow(Overflow),
	.Reg_1(Reg_1),
	.Reg_2(Reg_2),
	.Result(Result),
	.VisualA(VisualA),
	.VisualB(VisualB),
	.VisualC(VisualC),
	.VisualD(VisualD),
	.VisualE(VisualE),
	.VisualF(VisualF),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

